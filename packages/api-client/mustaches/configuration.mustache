/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}

import axios, { AxiosInstance } from 'axios';

export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
    raw?: boolean;
}

// API 응답 언래핑 인터셉터 함수
const setupResponseInterceptor = (axiosInstance: AxiosInstance, raw?: boolean): AxiosInstance => {
    axiosInstance.interceptors.response.use(
        (response) => {
            // raw 플래그가 있는 경우 
            if(raw) {
                if (response.data.code === 200) {
                    // 성공 응답: data 부분만 추출하여 response.data로 설정
                    return { ...response, data: response.data };
                } else {
                    // 에러 응답: 에러 던지기
                    throw new Error(response.data.msg || 'API request failed');
                }
            }
            // ApiResponse 형태의 응답인지 확인
            if (response.data && typeof response.data === 'object' && 'code' in response.data && 'data' in response.data) {
                if (response.data.code === 200) {
                    // 성공 응답: data 부분만 추출하여 response.data로 설정
                    return response.data;
                } else {
                    // 에러 응답: 에러 던지기
                    throw new Error(response.data.msg || 'API request failed');
                }
            }
            // 일반 응답은 그대로 반환
            return response;
        },
        (error) => {
            // 에러 응답도 같은 로직 적용
            if (error.response?.data && typeof error.response.data === 'object' && 'code' in error.response.data) {
                const apiError = new Error(error.response.data.msg || 'API request failed');
                (apiError as any).code = error.response.data.code;
                return Promise.reject(apiError);
            }
            return Promise.reject(error);
        }
    );
    return axiosInstance;
};

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    raw?: boolean

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = {
            ...param.baseOptions,
            headers: {
                {{#httpUserAgent}}
                'User-Agent': "{{httpUserAgent}}",
                {{/httpUserAgent}}
                ...param.baseOptions?.headers,
            },
        };
        this.formDataCtor = param.formDataCtor;
        this.raw = param.raw;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }

    /**
     * 인터셉터가 설정된 Axios 인스턴스를 생성합니다.
     * @returns {AxiosInstance} 인터셉터가 적용된 Axios 인스턴스
     */
    public createAxiosInstance(): AxiosInstance {
        const instance = axios.create(this.baseOptions);
        return setupResponseInterceptor(instance, this.raw);
    }
}
