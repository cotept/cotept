openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_0
        - App
  /health:
    get:
      operationId: AppController_checkHealth
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_0
  /users:
    get:
      description: 등록된 모든 사용자 목록을 조회합니다.
      operationId: UserController_getAllUsers
      parameters:
        - name: page
          required: false
          in: query
          description: '페이지 번호 (기본값: 1)'
          schema:
            type: number
        - name: limit
          required: false
          in: query
          description: '페이지당 항목 수 (기본값: 10)'
          schema:
            type: number
        - name: role
          required: false
          in: query
          description: 역할 필터
          schema:
            enum:
              - MENTEE
              - MENTOR
              - ADMIN
            type: string
        - name: status
          required: false
          in: query
          description: 상태 필터
          schema:
            enum:
              - ACTIVE
              - INACTIVE
              - SUSPENDED
            type: string
      responses:
        '200':
          description: 성공적으로 사용자 목록을 조회함
      summary: 사용자 목록 조회
      tags: &ref_1
        - 사용자 관리
    post:
      description: 새로운 사용자를 생성합니다.
      operationId: UserController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: 성공적으로 사용자를 생성함
        '400':
          description: 잘못된 요청 데이터
        '409':
          description: 이미 사용 중인 이메일
      summary: 사용자 생성
      tags: *ref_1
  /users/{id}:
    get:
      description: ID로 사용자 정보를 조회합니다.
      operationId: UserController_getUserById
      parameters:
        - name: id
          required: true
          in: path
          description: 사용자 ID
          schema:
            type: string
      responses:
        '200':
          description: 성공적으로 사용자를 조회함
        '404':
          description: 사용자를 찾을 수 없음
      summary: 사용자 상세 조회
      tags: *ref_1
    put:
      description: 사용자 정보를 수정합니다.
      operationId: UserController_updateUser
      parameters:
        - name: id
          required: true
          in: path
          description: 사용자 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: 성공적으로 사용자 정보를 수정함
        '400':
          description: 잘못된 요청 데이터
        '404':
          description: 사용자를 찾을 수 없음
      summary: 사용자 정보 수정
      tags: *ref_1
    delete:
      description: 사용자를 삭제합니다.
      operationId: UserController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          description: 사용자 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserDto'
      responses:
        '204':
          description: 성공적으로 사용자를 삭제함
        '404':
          description: 사용자를 찾을 수 없음
      summary: 사용자 삭제
      tags: *ref_1
  /users/{id}/password:
    patch:
      description: 사용자 비밀번호를 변경합니다.
      operationId: UserController_changePassword
      parameters:
        - name: id
          required: true
          in: path
          description: 사용자 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
      responses:
        '200':
          description: 성공적으로 비밀번호를 변경함
        '400':
          description: 비밀번호 정책 위반 또는 확인 불일치
        '401':
          description: 현재 비밀번호가 일치하지 않음
        '404':
          description: 사용자를 찾을 수 없음
      summary: 비밀번호 변경
      tags: *ref_1
  /auth/login:
    post:
      description: 이메일과 비밀번호로 로그인하고 토큰을 발급합니다.
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '200':
          description: 로그인 성공
        '400':
          description: 잘못된 요청 데이터
        '401':
          description: 인증 실패
      summary: 로그인
      tags: &ref_2
        - 인증
  /auth/refresh-token:
    post:
      description: 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급합니다.
      operationId: AuthController_refreshToken
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
      responses:
        '200':
          description: 토큰 갱신 성공
        '400':
          description: 잘못된 요청 데이터
        '401':
          description: 유효하지 않은 리프레시 토큰
      summary: 토큰 갱신
      tags: *ref_2
  /auth/validate-token:
    post:
      description: 액세스 토큰의 유효성을 검증합니다.
      operationId: AuthController_validateToken
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateTokenRequestDto'
      responses:
        '200':
          description: 토큰 검증 결과
        '400':
          description: 잘못된 요청 데이터
      summary: 토큰 검증
      tags: *ref_2
  /auth/logout:
    post:
      description: 사용자를 로그아웃하고 토큰을 무효화합니다.
      operationId: AuthController_logout
      parameters: []
      responses:
        '200':
          description: 로그아웃 성공
        '401':
          description: 인증 필요
      summary: 로그아웃
      tags: *ref_2
  /auth/send-verification-code:
    post:
      description: 이메일 또는 전화번호로 인증 코드를 발송합니다.
      operationId: AuthController_sendVerificationCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendVerificationCodeRequestDto'
      responses:
        '200':
          description: 인증 코드 발송 성공
        '400':
          description: 잘못된 요청 데이터
      summary: 인증 코드 발송
      tags: *ref_2
  /auth/verify-code:
    post:
      description: 발송된 인증 코드의 유효성을 검증합니다.
      operationId: AuthController_verifyCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyCodeRequestDto'
      responses:
        '200':
          description: 인증 코드 확인 성공
        '400':
          description: 잘못된 요청 데이터 또는 유효하지 않은 인증 코드
      summary: 인증 코드 확인
      tags: *ref_2
  /auth/social-login:
    post:
      description: 소셜 인증 코드를 사용하여 로그인하고 토큰을 발급합니다.
      operationId: AuthController_socialLogin
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLoginRequestDto'
      responses:
        '200':
          description: 소셜 로그인 성공
        '400':
          description: 잘못된 요청 데이터
        '401':
          description: 소셜 인증 실패
      summary: 소셜 로그인
      tags: *ref_2
  /auth/github-login:
    post:
      description: 소셜 인증 코드를 사용하여 로그인하고 토큰을 발급합니다.
      operationId: AuthController_githubLogin
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLoginRequestDto'
      responses:
        '200':
          description: 깃허브 소셜 로그인 성공
        '400':
          description: 잘못된 요청 데이터
        '401':
          description: 깃허브 소셜 인증 실패
      summary: 깃허브 로그인
      tags: *ref_2
  /auth/exchange-code:
    post:
      description: 소셜 로그인 후 발급된 인증 코드를 토큰으로 교환합니다.
      operationId: AuthController_exchangeAuthCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangeAuthCodeRequestDto'
      responses:
        '200':
          description: 토큰 교환 성공
        '400':
          description: 잘못된 요청 데이터
        '401':
          description: 유효하지 않은 인증 코드
      summary: 인증 코드 교환
      tags: *ref_2
  /auth/github:
    get:
      description: GitHub OAuth 인증을 시작합니다.
      operationId: GithubAuthController_githubLogin
      parameters:
        - name: redirectUrl
          required: false
          in: query
          description: 인증 성공 후 리다이렉트할 클라이언트 URL
          schema:
            type: string
      responses:
        '302':
          description: GitHub 인증 페이지로 리다이렉트
      summary: GitHub 로그인 시작
      tags: &ref_3
        - GitHub 인증
  /auth/github/callback:
    get:
      description: GitHub 인증 후 리다이렉트되는 엔드포인트입니다.
      operationId: GithubAuthController_githubCallback
      parameters:
        - name: redirectUrl
          required: false
          in: query
          description: 인증 성공 후 리다이렉트할 클라이언트 URL
          schema:
            type: string
        - name: code
          required: false
          in: query
          description: GitHub 인증 코드 (자동으로 처리됨)
          schema: {}
      responses:
        '302':
          description: 클라이언트로 리다이렉트
        '401':
          description: GitHub 인증 실패
      summary: GitHub 로그인 콜백
      tags: *ref_3
  /auth/google:
    get:
      description: Google OAuth 인증을 시작합니다.
      operationId: GoogleAuthController_googleLogin
      parameters:
        - name: redirectUrl
          required: false
          in: query
          description: 인증 성공 후 리다이렉트할 클라이언트 URL
          schema:
            type: string
      responses:
        '302':
          description: Google 인증 페이지로 리다이렉트
      summary: Google 로그인 시작
      tags: &ref_4
        - Google 인증
  /auth/google/callback:
    get:
      description: Google 인증 후 리다이렉트되는 엔드포인트입니다.
      operationId: GoogleAuthController_googleCallback
      parameters:
        - name: redirectUrl
          required: false
          in: query
          description: 인증 성공 후 리다이렉트할 클라이언트 URL
          schema:
            type: string
        - name: code
          required: false
          in: query
          description: Google 인증 코드 (자동으로 처리됨)
          schema: {}
      responses:
        '302':
          description: 클라이언트로 리다이렉트
        '401':
          description: Google 인증 실패
      summary: Google 로그인 콜백
      tags: *ref_4
info:
  title: CotePT API
  description: 코딩 테스트 멘토링 플랫폼 API
  version: '1.0'
  contact: {}
tags:
  - name: auth
    description: 인증 관련 API
  - name: mentee
    description: 멘티 관련 API
  - name: mentor
    description: 멘토 관련 API
  - name: mentoring
    description: 멘토링 관련 API
  - name: admin
    description: 관리자 관련 API
servers: []
components:
  securitySchemes:
    access-token:
      scheme: bearer
      bearerFormat: JWT
      type: http
      name: JWT
      description: JWT 토큰을 입력하세요
      in: header
  schemas:
    CreateUserDto:
      type: object
      properties:
        email:
          type: string
          description: 사용자 이메일
          example: user@example.com
        password:
          type: string
          description: 비밀번호 (8~32자, 대소문자, 숫자, 특수문자 포함)
          example: StrongP@ss123
        name:
          type: string
          description: 사용자 이름 (2~50자, 한글/영문만 허용)
          example: 홍길동
        role:
          type: string
          description: '사용자 역할 (기본값: MENTEE)'
          enum:
            - MENTEE
            - MENTOR
          example: MENTEE
        phoneNumber:
          type: string
          description: 전화번호 (- 없이 숫자만)
          example: '01012345678'
      required:
        - email
    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          description: 사용자 이름 (2~50자, 한글/영문만 허용)
          example: 홍길동
        status:
          type: string
          description: 사용자 상태
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPENDED
          example: ACTIVE
        phoneNumber:
          type: string
          description: 전화번호 (- 없이 숫자만)
          example: '01012345678'
        phoneVerified:
          type: boolean
          description: 전화번호 인증 여부
          example: false
    DeleteUserDto:
      type: object
      properties:
        reason:
          type: string
          description: 삭제 이유 (선택적)
          example: 서비스 이용 중단
        deleteType:
          type: string
          description: 삭제 유형 (소프트 삭제 또는 하드 삭제)
          enum:
            - SOFT
            - HARD
          default: SOFT
        deleteRelatedData:
          type: boolean
          description: 연관된 데이터도 함께 삭제 여부
          default: false
    ChangePasswordDto:
      type: object
      properties:
        currentPassword:
          type: string
          description: 현재 비밀번호
          example: CurrentP@ss123
        newPassword:
          type: string
          description: 새 비밀번호 (8~32자, 대소문자, 숫자, 특수문자 포함)
          example: NewStrongP@ss123
        confirmPassword:
          type: string
          description: 새 비밀번호 확인
          example: NewStrongP@ss123
      required:
        - currentPassword
        - newPassword
        - confirmPassword
    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
          description: 사용자 이메일
        password:
          type: string
          example: Password123!
          description: 사용자 비밀번호
      required:
        - email
        - password
    RefreshTokenRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: 리프레시 토큰
      required:
        - refreshToken
    ValidateTokenRequestDto:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: 검증할 액세스 토큰
      required:
        - token
    SendVerificationCodeRequestDto:
      type: object
      properties:
        authType:
          type: string
          description: 인증 유형
          enum:
            - PHONE
            - EMAIL
            - COMPANY
          example: EMAIL
        target:
          type: string
          description: 인증 대상 (이메일 또는 전화번호)
          example: user@example.com
      required:
        - authType
        - target
    VerifyCodeRequestDto:
      type: object
      properties:
        verificationId:
          type: string
          description: 검증 ID
          example: 550e8400-e29b-41d4-a716-446655440000
        code:
          type: string
          description: 인증 코드 (6자리)
          example: '123456'
      required:
        - verificationId
        - code
    SocialLoginRequestDto:
      type: object
      properties:
        provider:
          type: string
          description: 소셜 로그인 제공자
          enum:
            - google
            - kakao
            - naver
            - github
          example: google
        code:
          type: string
          description: 인증 코드
          example: abcdefghijklmnopqrstuvwxyz
        redirectUri:
          type: string
          description: 리다이렉트 URI
          example: https://cotept.com/auth/google/callback
      required:
        - provider
        - code
        - redirectUri
    ExchangeAuthCodeRequestDto:
      type: object
      properties:
        code:
          type: string
          example: a1b2c3d4...
          description: 인증 코드
      required:
        - code
