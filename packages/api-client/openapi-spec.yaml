openapi: 3.0.0
paths:
  /api/v1:
    get:
      operationId: getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_0
        - App
  /api/v1/health:
    get:
      operationId: checkHealth
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_0
  /api/v1/users/userlist:
    get:
      description: 등록된 모든 사용자 목록을 조회합니다.
      operationId: getAllUsers
      parameters:
        - name: page
          required: false
          in: query
          description: '페이지 번호 (기본값: 1)'
          schema:
            type: number
        - name: limit
          required: false
          in: query
          description: '페이지당 항목 수 (기본값: 10)'
          schema:
            type: number
        - name: role
          required: false
          in: query
          description: 역할 필터
          schema:
            enum:
              - MENTEE
              - MENTOR
              - ADMIN
            type: string
        - name: status
          required: false
          in: query
          description: 상태 필터
          schema:
            enum:
              - ACTIVE
              - INACTIVE
              - SUSPENDED
            type: string
      responses:
        '200':
          description: 성공적으로 사용자 목록을 조회함
          content:
            application/json:
              schema:
                title: UserListResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserListResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 목록 조회
      tags: &ref_1
        - User
  /api/v1/users/{idx}:
    get:
      description: IDX로 사용자 정보를 조회합니다.
      operationId: getUserById
      parameters:
        - name: idx
          required: true
          in: path
          description: 사용자 인덱스
          schema:
            type: number
      responses:
        '200':
          description: 성공적으로 사용자를 조회함
          content:
            application/json:
              schema:
                title: UserResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 요청하신 사용자를 찾을 수 없습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 상세 조회
      tags: *ref_1
    put:
      description: 사용자 정보를 수정합니다.
      operationId: updateUser
      parameters:
        - name: idx
          required: true
          in: path
          description: 사용자 인덱스
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDto'
      responses:
        '200':
          description: 성공적으로 사용자 정보를 수정함
          content:
            application/json:
              schema:
                title: UserResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 사용자를 찾을 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: 요청하신 사용자를 찾을 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '409':
          description: 사용자 데이터 충돌
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 409
                  message:
                    type: string
                    example: 이미 사용 중인 이메일 또는 전화번호입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '422':
          description: 처리할 수 없는 요청
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 422
                  message:
                    type: string
                    example: 요청은 형식이 맞으나 처리할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 정보 수정
      tags: *ref_1
    delete:
      description: 사용자를 삭제합니다.
      operationId: deleteUser
      parameters:
        - name: idx
          required: true
          in: path
          description: 사용자 ID
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequestDto'
      responses:
        '200':
          description: 성공적으로 사용자를 삭제함
          content:
            application/json:
              schema:
                title: UserDeletionResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserDeletionResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 요청하신 사용자를 찾을 수 없습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 삭제
      tags: *ref_1
  /api/v1/users/{userId}:
    get:
      description: ID로 사용자 정보를 조회합니다.
      operationId: getUserByUserId
      parameters:
        - name: userId
          required: true
          in: path
          description: 사용자 ID
          schema:
            type: string
      responses:
        '200':
          description: 성공적으로 사용자를 조회함
          content:
            application/json:
              schema:
                title: UserResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 요청하신 사용자를 찾을 수 없습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 상세 조회
      tags: *ref_1
  /api/v1/users/register:
    post:
      description: 새로운 사용자를 생성합니다.
      operationId: createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestDto'
      responses:
        '200':
          description: 성공적으로 사용자를 생성함
          content:
            application/json:
              schema:
                title: UserResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 사용자를 찾을 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: 요청하신 사용자를 찾을 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '409':
          description: 사용자 데이터 충돌
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 409
                  message:
                    type: string
                    example: 이미 사용 중인 이메일 또는 전화번호입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '422':
          description: 처리할 수 없는 요청
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 422
                  message:
                    type: string
                    example: 요청은 형식이 맞으나 처리할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 생성
      tags: *ref_1
  /api/v1/users/{idx}/password:
    patch:
      description: 사용자 비밀번호를 변경합니다.
      operationId: changePassword
      parameters:
        - name: idx
          required: true
          in: path
          description: 사용자 IDX
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequestDto'
      responses:
        '200':
          description: 성공적으로 비밀번호를 변경함
          content:
            application/json:
              schema:
                title: PasswordChangeResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/PasswordChangeResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 사용자를 찾을 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: 요청하신 사용자를 찾을 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '409':
          description: 사용자 데이터 충돌
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 409
                  message:
                    type: string
                    example: 이미 사용 중인 이메일 또는 전화번호입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '422':
          description: 처리할 수 없는 요청
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 422
                  message:
                    type: string
                    example: 요청은 형식이 맞으나 처리할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 비밀번호 변경
      tags: *ref_1
  /api/v1/user-profiles/{userId}:
    get:
      description: 사용자 ID로 프로필 정보를 조회합니다.
      operationId: getUserProfile
      parameters:
        - name: userId
          required: true
          in: path
          description: 사용자 ID
          schema:
            example: dudtod1596
            type: string
      responses:
        '200':
          description: 성공적으로 사용자 프로필을 조회함
          content:
            application/json:
              schema:
                title: UserProfileResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 요청하신 사용자 프로필을 찾을 수 없습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 프로필 조회
      tags: &ref_2
        - UserProfile
    put:
      description: 사용자 프로필 정보를 수정합니다.
      operationId: updateUserProfile
      parameters:
        - name: userId
          required: true
          in: path
          description: 사용자 ID
          schema:
            example: dudtod1596
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequestDto'
      responses:
        '200':
          description: 성공적으로 사용자 프로필을 수정함
          content:
            application/json:
              schema:
                title: UserProfileUpdateResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserProfileUpdateResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 해당 사용자 프로필을 찾을 수 없습니다
        '409':
          description: 닉네임이 이미 사용 중입니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 프로필 수정
      tags: *ref_2
    delete:
      description: 사용자 프로필을 삭제합니다.
      operationId: deleteUserProfile
      parameters:
        - name: userId
          required: true
          in: path
          description: 사용자 ID
          schema:
            example: dudtod1596
            type: string
      responses:
        '200':
          description: 성공적으로 사용자 프로필을 삭제함
          content:
            application/json:
              schema:
                title: UserProfileDeletionResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserProfileDeletionResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 해당 사용자 프로필을 찾을 수 없습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 프로필 삭제
      tags: *ref_2
  /api/v1/user-profiles/idx/{idx}:
    get:
      description: 프로필 고유 ID로 프로필 정보를 조회합니다.
      operationId: getUserProfileByIdx
      parameters:
        - name: idx
          required: true
          in: path
          description: 프로필 고유 ID
          schema:
            type: number
      responses:
        '200':
          description: 성공적으로 사용자 프로필을 조회함
          content:
            application/json:
              schema:
                title: UserProfileResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 요청하신 사용자 프로필을 찾을 수 없습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 프로필 ID로 조회
      tags: *ref_2
  /api/v1/user-profiles:
    post:
      description: 새로운 사용자 프로필을 생성합니다.
      operationId: createUserProfile
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserProfileRequestDto'
      responses:
        '200':
          description: 성공적으로 사용자 프로필을 생성함
          content:
            application/json:
              schema:
                title: UserProfileCreationResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserProfileCreationResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 해당 사용자를 찾을 수 없습니다
        '409':
          description: 이미 프로필이 존재하거나 닉네임이 중복됩니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 프로필 생성
      tags: *ref_2
  /api/v1/user-profiles/{userId}/completeness:
    get:
      description: 사용자 프로필의 완성도를 확인하고 누락된 필드를 반환합니다.
      operationId: checkProfileCompleteness
      parameters:
        - name: userId
          required: true
          in: path
          description: 사용자 ID
          schema:
            example: dudtod1596
            type: string
      responses:
        '200':
          description: 성공적으로 프로필 완성도를 확인함
          content:
            application/json:
              schema:
                title: UserProfileCompletenessResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserProfileCompletenessResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 프로필 완성도 확인
      tags: *ref_2
  /api/v1/user-profiles/{userId}/upsert:
    put:
      description: 프로필이 존재하면 수정하고, 존재하지 않으면 생성합니다.
      operationId: upsertUserProfile
      parameters:
        - name: userId
          required: true
          in: path
          description: 사용자 ID
          schema:
            example: dudtod1596
            type: string
      responses:
        '200':
          description: 성공적으로 프로필을 생성 또는 수정함
          content:
            application/json:
              schema:
                title: UserProfileUpsertResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserProfileUpsertResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 해당 사용자를 찾을 수 없습니다
        '409':
          description: 닉네임이 이미 사용 중입니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 프로필 생성 또는 수정
      tags: *ref_2
  /api/v1/user-profiles/signup/{userId}:
    post:
      description: 회원가입 시 최소한의 정보로 기본 프로필을 생성하고 완성도 가이드를 제공합니다.
      operationId: createBasicProfileForSignup
      parameters:
        - name: userId
          required: true
          in: path
          description: 사용자 ID
          schema:
            example: dudtod1596
            type: string
      responses:
        '200':
          description: 성공적으로 기본 프로필을 생성함
          content:
            application/json:
              schema:
                title: BasicProfileCreationResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/BasicProfileCreationResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 해당 사용자를 찾을 수 없습니다
        '409':
          description: 이미 프로필이 존재하거나 닉네임이 중복됩니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 회원가입 시 기본 프로필 생성
      tags: *ref_2
  /api/v1/auth/login:
    post:
      description: 이메일과 비밀번호로 로그인하고 토큰을 발급합니다.
      operationId: login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                title: TokenResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/TokenResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 이메일 또는 비밀번호가 올바르지 않습니다
        '422':
          description: 요청은 형식이 맞으나 처리할 수 없습니다
        '429':
          description: 로그인 시도 횟수를 초과했습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 로그인
      tags: &ref_3
        - Auth
  /api/v1/auth/logout:
    post:
      description: 사용자를 로그아웃하고 토큰을 무효화합니다.
      operationId: logout
      parameters: []
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                title: LogoutResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/LogoutResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 로그아웃
      tags: *ref_3
  /api/v1/auth/silent-refresh:
    post:
      description: 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급합니다.
      operationId: refreshToken
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
      responses:
        '200':
          description: 토큰 갱신 성공
          content:
            application/json:
              schema:
                title: TokenResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/TokenResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 유효하지 않은 리프레시 토큰
        '422':
          description: 요청은 형식이 맞으나 처리할 수 없습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 토큰 갱신
      tags: *ref_3
  /api/v1/auth/validate-token:
    post:
      description: 액세스 토큰의 유효성을 검증합니다.
      operationId: validateToken
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateTokenRequestDto'
      responses:
        '200':
          description: 토큰 검증 결과
          content:
            application/json:
              schema:
                title: ValidationResultResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/ValidationResultResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 유효하지 않은 토큰
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 토큰 검증
      tags: *ref_3
  /api/v1/auth/send-verification-code:
    post:
      description: 이메일 또는 전화번호로 인증 코드를 발송합니다. 아이디 찾기나 비밀번호 재설정을 위해 사용됩니다.
      operationId: sendVerificationCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendVerificationCodeRequestDto'
      responses:
        '200':
          description: 인증 코드 발송 성공
          content:
            application/json:
              schema:
                title: VerificationCodeResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/VerificationCodeResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '429':
          description: 인증 코드 발송 제한을 초과했습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 인증 코드 발송
      tags: *ref_3
  /api/v1/auth/verify-code:
    post:
      description: 발송된 인증 코드의 유효성을 검증합니다. 이 과정을 통해 인증을 완료할 수 있습니다.
      operationId: verifyCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyCodeRequestDto'
      responses:
        '200':
          description: 인증 코드 확인 성공
          content:
            application/json:
              schema:
                title: VerificationResultResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/VerificationResultResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증 코드가 일치하지 않습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 인증 코드 확인
      tags: *ref_3
  /api/v1/auth/exchange-code:
    post:
      description: 소셜 로그인 후 서버에서 발급된 임시 인증 코드를 토큰으로 교환합니다.
      operationId: exchangeAuthCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangeAuthCodeRequestDto'
      responses:
        '200':
          description: 토큰 교환 성공
          content:
            application/json:
              schema:
                title: TokenResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/TokenResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 유효하지 않은 인증 코드
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 임시 인증 코드를 실제 토큰으로 교환
      tags: *ref_3
  /api/v1/auth/confirm-social-link:
    post:
      description: 기존 계정에 소셜 계정 연결을 승인 또는 거부합니다.
      operationId: confirmSocialLink
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmSocialLinkRequestDto'
      responses:
        '200':
          description: 계정 연결 처리 성공
          content:
            application/json:
              schema:
                title: TokenResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/TokenResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 유효하지 않은 토큰
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 소셜 계정 연결 확인
      tags: *ref_3
  /api/v1/auth/find-id:
    post:
      description: >-
        인증된 이메일 또는 전화번호를 통해 사용자 아이디(이메일)를 찾습니다. 먼저 send-verification-code 호출 후
        인증 코드를 발급받아야 합니다.
      operationId: findId
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindIdRequestDto'
      responses:
        '200':
          description: 아이디 찾기 성공
          content:
            application/json:
              schema:
                title: FindIdResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/FindIdResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 아이디 찾기
      tags: *ref_3
  /api/v1/auth/reset-password:
    post:
      description: 인증된 사용자의 비밀번호를 재설정합니다. 먼저 send-verification-code 호출 후 인증 코드를 발급받아야 합니다.
      operationId: resetPassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestDto'
      responses:
        '200':
          description: 비밀번호 재설정 성공
          content:
            application/json:
              schema:
                title: ResetPasswordResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/ResetPasswordResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 비밀번호 재설정
      tags: *ref_3
  /api/v1/auth/check-email-availability:
    post:
      description: 회원가입 시 이메일 주소의 사용 가능 여부를 확인합니다.
      operationId: checkEmailAvailability
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckEmailAvailabilityRequestDto'
      responses:
        '200':
          description: 이메일 중복 확인 결과
          content:
            application/json:
              schema:
                title: AvailabilityResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/AvailabilityResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 이메일 중복 확인
      tags: *ref_3
  /api/v1/auth/check-userid-availability:
    post:
      description: 회원가입 시 사용자 ID의 사용 가능 여부를 확인합니다.
      operationId: checkUserIdAvailability
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckUserIdAvailabilityRequestDto'
      responses:
        '200':
          description: 사용자 ID 중복 확인 결과
          content:
            application/json:
              schema:
                title: AvailabilityResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/AvailabilityResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 사용자 ID 중복 확인
      tags: *ref_3
  /api/v1/auth/github:
    get:
      description: GitHub OAuth 인증을 시작합니다.
      operationId: githubLogin
      parameters:
        - name: redirectUrl
          required: false
          in: query
          description: 인증 성공 후 리다이렉트할 클라이언트 URL
          schema:
            type: string
      responses:
        '200':
          description: GitHub 인증 페이지로 리다이렉트
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
      summary: GitHub 로그인 시작
      tags: &ref_4
        - GithubAuth
  /api/v1/auth/github/callback:
    get:
      description: GitHub 인증 후 리다이렉트되는 엔드포인트입니다.
      operationId: githubCallback
      parameters:
        - name: redirectUrl
          required: false
          in: query
          description: 인증 성공 후 리다이렉트할 클라이언트 URL
          schema:
            type: string
        - name: code
          required: false
          in: query
          description: GitHub 인증 코드 (자동으로 처리됨)
          schema:
            type: string
      responses:
        '200':
          description: 클라이언트로 리다이렉트
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '401':
          description: GitHub 인증 실패
      summary: GitHub 로그인 콜백
      tags: *ref_4
  /api/v1/auth/google:
    get:
      description: Google OAuth 인증을 시작합니다.
      operationId: googleLogin
      parameters:
        - name: redirectUrl
          required: false
          in: query
          description: 인증 성공 후 리다이렉트할 클라이언트 URL
          schema:
            type: string
      responses:
        '200':
          description: Google 인증 페이지로 리다이렉트
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
      summary: Google 로그인 시작
      tags: &ref_5
        - GoogleAuth
  /api/v1/auth/google/callback:
    get:
      description: Google 인증 후 리다이렉트되는 엔드포인트입니다.
      operationId: googleCallback
      parameters:
        - name: redirectUrl
          required: false
          in: query
          description: 인증 성공 후 리다이렉트할 클라이언트 URL
          schema:
            type: string
        - name: code
          required: false
          in: query
          description: Google 인증 코드 (자동으로 처리됨)
          schema:
            type: string
      responses:
        '200':
          description: 클라이언트로 리다이렉트
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '401':
          description: Google 인증 실패
      summary: Google 로그인 콜백
      tags: *ref_5
  /api/v1/mail/email-verification:
    post:
      operationId: sendEmailVerification
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailRequestDto'
      responses:
        '200':
          description: 이메일 본인확인 발송 성공
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '429':
          description: 메일 발송 제한을 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: 메일 발송 제한을 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 메일 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 메일 서비스를 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 이메일 본인확인
      tags: &ref_6
        - Mail
  /api/v1/mail/password-recovery:
    post:
      operationId: sendPasswordRecovery
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailRequestDto'
      responses:
        '200':
          description: 비밀번호 찾기 이메일 발송 성공
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '429':
          description: 메일 발송 제한을 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: 메일 발송 제한을 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 메일 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 메일 서비스를 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 비밀번호 찾기
      tags: *ref_6
  /api/v1/mail/verification-code:
    post:
      operationId: sendMailVerificationCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailRequestDto'
      responses:
        '200':
          description: 인증번호 발송 성공
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '429':
          description: 메일 발송 제한을 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: 메일 발송 제한을 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 메일 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 메일 서비스를 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 인증번호 발송
      tags: *ref_6
  /api/v1/mail/reservation-create:
    post:
      operationId: sendReservationCreate
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailRequestDto'
      responses:
        '200':
          description: 멘토링 예약 신청 이메일 발송 성공
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 메일 서비스를 사용할 수 없습니다
      summary: 멘토링 예약 신청
      tags: *ref_6
  /api/v1/mail/reservation-fix:
    post:
      operationId: sendReservationFix
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailRequestDto'
      responses:
        '200':
          description: 멘토링 예약 확정 이메일 발송 성공
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 메일 서비스를 사용할 수 없습니다
      summary: 멘토링 예약 확정
      tags: *ref_6
  /api/v1/mail/reservation-cancel:
    post:
      operationId: sendReservationCancel
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailRequestDto'
      responses:
        '200':
          description: 멘토링 예약 취소 이메일 발송 성공
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 메일 서비스를 사용할 수 없습니다
      summary: 멘토링 예약 취소
      tags: *ref_6
  /api/v1/mail/reservation-change:
    post:
      operationId: sendReservationChange
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailRequestDto'
      responses:
        '200':
          description: 멘토링 예약 변경 이메일 발송 성공
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 메일 서비스를 사용할 수 없습니다
      summary: 멘토링 예약 변경
      tags: *ref_6
  /api/v1/mail/reservation-prenotice:
    post:
      operationId: sendReservationPrenotice
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailRequestDto'
      responses:
        '200':
          description: 멘토링 사전안내 이메일 발송 성공
          content:
            application/json:
              schema:
                title: EmptyWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    type: 'null'
                    description: 응답 데이터 없음
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 메일 서비스를 사용할 수 없습니다
      summary: 멘토링 사전안내
      tags: *ref_6
  /api/v1/mail-audit/{idx}:
    get:
      operationId: getMailAuditById
      parameters:
        - name: idx
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: 메일 감사 조회 성공
          content:
            application/json:
              schema:
                title: MailAuditResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/MailAuditResponseDto'
      summary: 메일 감사 조회 (ID)
      tags: &ref_7
        - MailAudit
  /api/v1/mail-audit:
    get:
      operationId: searchMailAudit
      parameters:
        - name: mailId
          required: true
          in: query
          schema:
            type: string
        - name: recipient
          required: true
          in: query
          schema:
            type: string
        - name: template
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 메일 감사 검색 성공
          content:
            application/json:
              schema:
                title: MailAuditResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/MailAuditResponseDto'
      summary: 메일 감사 조회 (검색)
      tags: *ref_7
  /api/v1/mentor/profile:
    post:
      operationId: createMentorProfile
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMentorProfileDto'
      responses:
        '201':
          description: 멘토 프로필 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorProfileDto'
        '400':
          description: 잘못된 요청 데이터
        '404':
          description: 사용자 또는 태그를 찾을 수 없음
        '409':
          description: 이미 멘토 프로필이 존재함
      summary: 새 멘토 프로필 생성
      tags: &ref_8
        - 멘토 프로필
  /api/v1/mentor/profile/{idx}:
    put:
      operationId: updateMentorProfile
      parameters:
        - name: idx
          required: true
          in: path
          description: 멘토 프로필 IDX
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMentorProfileDto'
      responses:
        '200':
          description: 멘토 프로필 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorProfileDto'
        '400':
          description: 잘못된 요청 데이터
        '404':
          description: 프로필 또는 태그를 찾을 수 없음
      summary: 멘토 프로필 정보 수정 (PUT)
      tags: *ref_8
    delete:
      operationId: deleteMentorProfile
      parameters:
        - name: idx
          required: true
          in: path
          description: 멘토 프로필 IDX
          schema:
            type: number
      responses:
        '200':
          description: 멘토 프로필 비활성화 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionResponseDto'
        '404':
          description: 프로필을 찾을 수 없음
      summary: 멘토 프로필 비활성화 (논리적 삭제)
      tags: *ref_8
  /api/v1/mentor/profile/{idx}/permanent:
    delete:
      operationId: hardDeleteMentorProfile
      parameters:
        - name: idx
          required: true
          in: path
          description: 멘토 프로필 IDX
          schema:
            type: number
      responses:
        '200':
          description: 멘토 프로필 영구 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionResponseDto'
        '404':
          description: 프로필을 찾을 수 없음
      summary: 멘토 프로필 영구 삭제 (물리적 삭제)
      tags: *ref_8
  /api/v1/mentor/profile/{userId}:
    get:
      description: 특정 사용자의 멘토 프로필 정보를 조회합니다.
      operationId: getMentorProfile
      parameters:
        - name: userId
          required: true
          in: path
          description: 조회할 사용자의 ID
          schema:
            example: user-12345
            type: string
      responses:
        '200':
          description: 멘토 프로필 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorProfileDto'
        '404':
          description: 멘토 프로필을 찾을 수 없음
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: User ID user-12345에 해당하는 멘토 프로필을 찾을 수 없습니다.
                  error: Not Found
      summary: 사용자 ID로 멘토 프로필 조회
      tags: *ref_8
  /api/v1/onboarding/profile:
    post:
      operationId: createBasicProfile
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasicProfileDto'
      responses:
        '200':
          description: 기본 프로필이 성공적으로 생성되었습니다.
          content:
            application/json:
              schema:
                title: UserProfileResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '409':
          description: 닉네임이 중복되거나 이미 프로필이 존재합니다.
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 온보딩 - 기본 프로필 생성
      tags: &ref_9
        - Onboarding
  /api/v1/onboarding/baekjoon/verify/start:
    post:
      operationId: startBaekjoonVerification
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartBaekjoonVerificationDto'
      responses:
        '200':
          description: 백준 인증 세션이 성공적으로 시작되었습니다.
          content:
            application/json:
              schema:
                title: VerificationStatusResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/VerificationStatusResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 백준 사용자를 찾을 수 없습니다.
        '408':
          description: 외부 API 응답 시간이 초과되었습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 408
                  message:
                    type: string
                    example: 외부 API 응답 시간이 초과되었습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '409':
          description: 이미 진행 중인 인증이 있거나, 다른 사용자가 사용중인 핸들입니다.
        '429':
          description: API 호출 한도를 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: API 호출 한도를 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 외부 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 외부 서비스를 일시적으로 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 온보딩 - 백준 인증 시작
      tags: *ref_9
  /api/v1/onboarding/baekjoon/verify/complete:
    post:
      operationId: completeBaekjoonVerification
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteBaekjoonVerificationDto'
      responses:
        '200':
          description: 백준 인증이 성공적으로 완료되었습니다.
          content:
            application/json:
              schema:
                title: VerificationResultResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/VerificationResultResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 진행 중인 인증 세션을 찾을 수 없습니다.
        '408':
          description: 외부 API 응답 시간이 초과되었습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 408
                  message:
                    type: string
                    example: 외부 API 응답 시간이 초과되었습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '429':
          description: API 호출 한도를 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: API 호출 한도를 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 외부 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 외부 서비스를 일시적으로 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 온보딩 - 백준 인증 완료
      tags: *ref_9
  /api/v1/onboarding/analyze:
    post:
      operationId: analyzeSkills
      parameters: []
      responses:
        '200':
          description: 실력 분석이 성공적으로 완료되었습니다.
          content:
            application/json:
              schema:
                title: TagStatisticsOutputResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/TagStatisticsOutputDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 백준 프로필을 찾을 수 없습니다.
        '408':
          description: 외부 API 응답 시간이 초과되었습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 408
                  message:
                    type: string
                    example: 외부 API 응답 시간이 초과되었습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '429':
          description: API 호출 한도를 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: API 호출 한도를 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 외부 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 외부 서비스를 일시적으로 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 온보딩 - 실력 분석 실행
      tags: *ref_9
  /api/v1/onboarding/mentor/eligibility:
    get:
      operationId: checkMentorEligibility
      parameters: []
      responses:
        '200':
          description: 멘토 자격 요건을 성공적으로 확인했습니다.
          content:
            application/json:
              schema:
                title: MentorEligibilityResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/MentorEligibilityDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 백준 프로필을 찾을 수 없습니다.
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 온보딩 - 멘토 자격 요건 확인
      tags: *ref_9
  /api/v1/onboarding/mentor/tags:
    get:
      operationId: getMentorTags
      parameters: []
      responses:
        '200':
          description: 멘토 태그 목록을 성공적으로 조회했습니다.
          content:
            application/json:
              schema:
                title: MentorTagsResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/MentorTagsResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 온보딩 - 멘토 프로필 태그 목록 조회
      tags: *ref_9
  /api/v1/onboarding/mentor-profile:
    post:
      operationId: createMentorProfileOnboarding
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMentorProfileDto'
      responses:
        '200':
          description: 멘토 프로필이 성공적으로 생성/업데이트되었습니다.
          content:
            application/json:
              schema:
                title: MentorProfileResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/MentorProfileDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 사용자를 찾을 수 없습니다.
        '409':
          description: 멘토 프로필이 이미 존재합니다.
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 온보딩 - 멘토 프로필 생성/업데이트
      tags: *ref_9
  /api/v1/onboarding/complete:
    post:
      operationId: completeOnboarding
      parameters: []
      responses:
        '200':
          description: 온보딩이 성공적으로 완료되었습니다.
          content:
            application/json:
              schema:
                title: BooleanResponse
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/Boolean'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 온보딩 상태를 찾을 수 없습니다.
        '409':
          description: 온보딩이 아직 완료되지 않았습니다.
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 온보딩 - 온보딩 완료
      tags: *ref_9
  /api/v1/baekjoon/verification/start:
    post:
      description: 백준 ID 인증 프로세스를 시작하고 인증 문자열을 발급받습니다.
      operationId: startVerification
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartVerificationRequestDto'
      responses:
        '200':
          description: 인증 세션이 성공적으로 생성됨
          content:
            application/json:
              schema:
                title: VerificationStatusResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/VerificationStatusResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 백준 사용자를 찾을 수 없습니다
        '408':
          description: 외부 API 응답 시간이 초과되었습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 408
                  message:
                    type: string
                    example: 외부 API 응답 시간이 초과되었습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '409':
          description: 이미 진행 중인 인증 세션이 있습니다
        '429':
          description: API 호출 한도를 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: API 호출 한도를 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 외부 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 외부 서비스를 일시적으로 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 백준 ID 인증 시작
      tags: &ref_10
        - Baekjoon
  /api/v1/baekjoon/verification/complete:
    post:
      description: solved.ac 프로필 이름을 확인하여 백준 ID 인증을 완료합니다.
      operationId: completeVerification
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteVerificationRequestDto'
      responses:
        '200':
          description: 인증이 성공적으로 완료됨
          content:
            application/json:
              schema:
                title: VerificationResultResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/VerificationResultResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 인증 세션을 찾을 수 없습니다
        '408':
          description: 외부 API 응답 시간이 초과되었습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 408
                  message:
                    type: string
                    example: 외부 API 응답 시간이 초과되었습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '429':
          description: API 호출 한도를 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: API 호출 한도를 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 외부 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 외부 서비스를 일시적으로 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 백준 ID 인증 완료
      tags: *ref_10
  /api/v1/baekjoon/verification/status/{userId}:
    get:
      description: 진행 중인 인증 세션의 상태를 조회합니다.
      operationId: getVerificationStatus
      parameters:
        - name: userId
          required: true
          in: path
          description: 사용자 ID (이메일 형식)
          schema:
            example: user@example.com
            type: string
      responses:
        '200':
          description: 인증 상태 조회 성공
          content:
            application/json:
              schema:
                title: VerificationStatusResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/VerificationStatusResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 인증 세션을 찾을 수 없습니다
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 인증 상태 조회
      tags: *ref_10
  /api/v1/baekjoon/profile:
    get:
      description: 사용자의 백준 프로필 정보를 조회합니다. handle을 제공하지 않으면 현재 사용자의 프로필을 조회합니다.
      operationId: getProfile
      parameters:
        - name: email
          required: true
          in: query
          description: 사용자 이메일
          schema:
            example: user@example.com
            type: string
        - name: handle
          required: true
          in: query
          description: 백준 ID
          schema:
            example: solved_user123
            type: string
      responses:
        '200':
          description: 프로필 조회 성공
          content:
            application/json:
              schema:
                title: BaekjoonProfileResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/BaekjoonProfileResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 백준 프로필을 찾을 수 없습니다
        '408':
          description: 외부 API 응답 시간이 초과되었습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 408
                  message:
                    type: string
                    example: 외부 API 응답 시간이 초과되었습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '429':
          description: API 호출 한도를 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: API 호출 한도를 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 외부 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 외부 서비스를 일시적으로 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 백준 프로필 조회
      tags: *ref_10
  /api/v1/baekjoon/statistics:
    get:
      description: 사용자의 백준 태그별 문제 해결 통계를 조회합니다.
      operationId: getStatistics
      parameters:
        - name: email
          required: true
          in: query
          description: 사용자 이메일
          schema:
            example: user@example.com
            type: string
        - name: handle
          required: true
          in: query
          description: 백준 ID
          schema:
            example: solved_user123
            type: string
      responses:
        '200':
          description: 태그 통계 조회 성공
          content:
            application/json:
              schema:
                title: TagStatisticsResponseWrapper
                type: object
                properties:
                  message:
                    type: string
                    description: 응답 메시지
                    example: 성공적으로 처리되었습니다.
                  data:
                    $ref: '#/components/schemas/TagStatisticsResponseDto'
        '400':
          description: 잘못된 요청 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: 잘못된 요청 데이터입니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 인증이 필요합니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: 인증이 필요합니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '403':
          description: 접근 권한이 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 403
                  message:
                    type: string
                    example: 해당 작업을 수행할 권한이 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '404':
          description: 태그 통계를 찾을 수 없습니다
        '408':
          description: 외부 API 응답 시간이 초과되었습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 408
                  message:
                    type: string
                    example: 외부 API 응답 시간이 초과되었습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '429':
          description: API 호출 한도를 초과했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: API 호출 한도를 초과했습니다. 잠시 후 다시 시도해주세요.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: 서버 내부 오류가 발생했습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
        '503':
          description: 외부 서비스를 사용할 수 없습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 503
                  message:
                    type: string
                    example: 외부 서비스를 일시적으로 사용할 수 없습니다.
                  timestamp:
                    type: string
                    example: '2024-01-01T00:00:00.000Z'
      summary: 백준 태그 통계 조회
      tags: *ref_10
info:
  title: CotePT API
  description: 코딩 테스트 멘토링 플랫폼 API
  version: '1.0'
  contact: {}
tags:
  - name: auth
    description: 인증 관련 API
  - name: mentee
    description: 멘티 관련 API
  - name: mentor
    description: 멘토 관련 API
  - name: mentoring
    description: 멘토링 관련 API
  - name: admin
    description: 관리자 관련 API
servers: []
components:
  securitySchemes:
    access-token:
      scheme: bearer
      bearerFormat: JWT
      type: http
      name: JWT
      description: JWT 토큰을 입력하세요
      in: header
  schemas:
    ApiResponseUserListResponseDto:
      type: object
      properties: {}
    UserRole:
      type: string
      enum:
        - MENTEE
        - MENTOR
        - ADMIN
      description: 사용자 역할
    UserStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - SUSPENDED
      description: 사용자 상태
    UserDto:
      type: object
      properties:
        idx:
          type: number
          description: 사용자 고유 IDX (자동 증가 기본키)
          example: 123
        userId:
          type: string
          description: 사용자 로그인 아이디 (6~20자, 영문/숫자/특수문자)
          example: dudtod1596
        email:
          type: string
          description: 사용자 이메일
          example: user@example.com
        name:
          type: string
          description: 비밀번호 (8~32자, 대소문자, 숫자, 특수문자 포함)
          example: StrongP@ss123
        role:
          description: 사용자 역할
          example: MENTEE
          allOf:
            - $ref: '#/components/schemas/UserRole'
        status:
          description: 사용자 상태
          example: ACTIVE
          allOf:
            - $ref: '#/components/schemas/UserStatus'
        phoneNumber:
          type: string
          description: 전화번호 (- 없이 숫자만)
          example: '01012345678'
        phoneVerified:
          type: boolean
          description: 전화번호 인증 여부
          example: false
        createdAt:
          format: date-time
          type: string
          description: 사용자 생성일
          example: '2023-01-01T00:00:00Z'
        updatedAt:
          format: date-time
          type: string
          description: 사용자 정보 수정일
          example: '2023-01-01T00:00:00Z'
        lastLoginAt:
          format: date-time
          type: string
          description: 마지막 로그인 일시
          example: '2023-01-01T00:00:00Z'
      required:
        - idx
        - userId
        - email
        - role
        - status
        - createdAt
        - updatedAt
    UserListResponseDto:
      type: object
      properties:
        users:
          description: 사용자 목록
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        totalCount:
          type: number
          description: 총 사용자 수
          example: 150
        currentPage:
          type: number
          description: 현재 페이지
          example: 1
        pageSize:
          type: number
          description: 페이지당 항목 수
          example: 10
        totalPages:
          type: number
          description: 총 페이지 수
          example: 15
        hasNext:
          type: boolean
          description: 다음 페이지 존재 여부
          example: true
        hasPrevious:
          type: boolean
          description: 이전 페이지 존재 여부
          example: false
      required:
        - users
        - totalCount
        - currentPage
        - pageSize
        - totalPages
        - hasNext
        - hasPrevious
    ApiResponseUserDto:
      type: object
      properties: {}
    CreateUserRequestDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 로그인 아이디 (6~20자, 영문/숫자/특수문자)
          example: dudtod1596
        email:
          type: string
          description: 사용자 이메일
          example: user@example.com
        name:
          type: string
          description: 비밀번호 (8~32자, 대소문자, 숫자, 특수문자 포함)
          example: StrongP@ss123
        role:
          description: '사용자 역할 (기본값: MENTEE)'
          example: MENTEE
          allOf:
            - $ref: '#/components/schemas/UserRole'
        phoneNumber:
          type: string
          description: 전화번호 (- 없이 숫자만)
          example: '01012345678'
      required:
        - userId
        - email
    UpdateUserRequestDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 로그인 아이디 (6~20자, 영문/숫자/특수문자)
          example: dudtod1596
        email:
          type: string
          description: 사용자 이메일
          example: user@example.com
        name:
          type: string
          description: 비밀번호 (8~32자, 대소문자, 숫자, 특수문자 포함)
          example: StrongP@ss123
        phoneNumber:
          type: string
          description: 전화번호 (- 없이 숫자만)
          example: '01012345678'
    ApiResponseUserDeletionResponseDto:
      type: object
      properties: {}
    UserDeletionResponseDto:
      type: object
      properties:
        success:
          type: boolean
          description: 삭제 성공 여부
          example: true
        deletedUserId:
          type: string
          description: 삭제된 사용자 ID
          example: dudtod1596
        deletedAt:
          type: string
          description: 삭제 완료 시간
          example: '2023-01-01T00:00:00Z'
        message:
          type: string
          description: 응답 메시지
          example: 사용자가 성공적으로 삭제되었습니다.
      required:
        - success
        - deletedUserId
        - deletedAt
        - message
    DeleteUserRequestDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 로그인 아이디 (6~20자, 영문/숫자/특수문자)
          example: dudtod1596
        reason:
          type: string
          description: 삭제 사유
          example: 사용자 요청에 의한 계정 삭제
        password:
          type: string
          description: 삭제 확인을 위한 비밀번호
          example: UserP@ss123
      required:
        - userId
    ApiResponsePasswordChangeResponseDto:
      type: object
      properties: {}
    PasswordChangeResponseDto:
      type: object
      properties:
        success:
          type: boolean
          description: 비밀번호 변경 성공 여부
          example: true
        changedAt:
          type: string
          description: 변경 완료 시간
          example: '2023-01-01T00:00:00Z'
        message:
          type: string
          description: 응답 메시지
          example: 비밀번호가 성공적으로 변경되었습니다.
      required:
        - success
        - changedAt
        - message
    ChangePasswordRequestDto:
      type: object
      properties:
        currentPassword:
          type: string
          description: 현재 비밀번호
          example: CurrentP@ss123
        newPassword:
          type: string
          description: 새 비밀번호 (8~32자, 대소문자, 숫자, 특수문자 포함)
          example: NewStrongP@ss123
        confirmPassword:
          type: string
          description: 새 비밀번호
          example: NewStrongP@ss123
      required:
        - currentPassword
        - newPassword
        - confirmPassword
    ApiResponseUserProfileDto:
      type: object
      properties: {}
    UserProfileDto:
      type: object
      properties:
        idx:
          type: number
          description: 프로필 ID (자동증가 기본키)
          example: 1
        userId:
          type: string
          description: 사용자 로그인 아이디 (6~20자, 영문/숫자/특수문자)
          example: dudtod1596
        nickname:
          type: string
          description: 닉네임 (2~50자, 한글/영문만 허용)
          example: 코딩마스터
        introduce:
          type: string
          description: 자기소개 (280자 이하, 트위터 스타일)
          example: 안녕하세요! 백엔드 개발을 공부하고 있는 멘티입니다. 열심히 배워보겠습니다!
        profileImageUrl:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/profile/image.jpg
        createdAt:
          format: date-time
          type: string
          description: 생성일시
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          format: date-time
          type: string
          description: 수정일시
          example: '2024-01-15T10:30:00Z'
      required:
        - idx
        - userId
        - nickname
        - createdAt
        - updatedAt
    ApiResponseUserProfileCreationResponseDto:
      type: object
      properties: {}
    UserProfileResponseDto:
      type: object
      properties:
        idx:
          type: number
          description: 프로필 ID (자동증가 기본키)
          example: 1
        userId:
          type: string
          description: 사용자 로그인 아이디 (6~20자, 영문/숫자/특수문자)
          example: dudtod1596
        nickname:
          type: string
          description: 닉네임 (2~50자, 한글/영문만 허용)
          example: 코딩마스터
        introduce:
          type: string
          description: 자기소개 (280자 이하, 트위터 스타일)
          example: 안녕하세요! 백엔드 개발을 공부하고 있는 멘티입니다. 열심히 배워보겠습니다!
        profileImageUrl:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/profile/image.jpg
        createdAt:
          format: date-time
          type: string
          description: 생성일시
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          format: date-time
          type: string
          description: 수정일시
          example: '2024-01-15T10:30:00Z'
      required:
        - idx
        - userId
        - nickname
        - createdAt
        - updatedAt
    UserProfileCreationResponseDto:
      type: object
      properties:
        profile:
          description: 생성된 사용자 프로필 정보
          allOf:
            - $ref: '#/components/schemas/UserProfileResponseDto'
        message:
          type: string
          description: 성공 메시지
          example: 사용자 프로필이 성공적으로 생성되었습니다.
        profileId:
          type: number
          description: 생성된 프로필 ID
          example: 1
      required:
        - profile
        - message
        - profileId
    CreateUserProfileRequestDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 로그인 아이디 (User 모듈에서 기존 검증된 사용자)
          example: dudtod1596
        nickname:
          type: string
          description: 닉네임 (2~50자, 한글/영문/숫자만 허용) - 필수
          example: 코딩마스터123
        introduce:
          type: string
          description: 자기소개 (280자 이하, 트위터 스타일)
          example: 안녕하세요! 백엔드 개발을 공부하고 있는 멘티입니다. 열심히 배워보겠습니다!
        profileImageUrl:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/profile/image.jpg
      required:
        - userId
        - nickname
    ApiResponseUserProfileUpdateResponseDto:
      type: object
      properties: {}
    UserProfileUpdateResponseDto:
      type: object
      properties:
        profile:
          description: 업데이트된 사용자 프로필 정보
          allOf:
            - $ref: '#/components/schemas/UserProfileResponseDto'
        message:
          type: string
          description: 성공 메시지
          example: 사용자 프로필이 성공적으로 업데이트되었습니다.
        updatedFields:
          description: 업데이트된 필드 목록
          example:
            - nickname
            - introduce
          type: array
          items:
            type: string
      required:
        - profile
        - message
        - updatedFields
    UpdateUserProfileRequestDto:
      type: object
      properties:
        nickname:
          type: string
          description: 닉네임 (2~50자, 한글/영문/숫자만 허용)
          example: 새로운닉네임123
        introduce:
          type: string
          description: 자기소개 (280자 이하, 트위터 스타일)
          example: 안녕하세요! 업데이트된 소개입니다.
        profileImageUrl:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/new-profile/image.jpg
        fullName:
          type: string
          description: 실명 (2~50자, 한글/영문만 허용)
          example: 김철수
    ApiResponseUserProfileDeletionResponseDto:
      type: object
      properties: {}
    UserProfileDeletionResponseDto:
      type: object
      properties:
        success:
          type: boolean
          description: 삭제 성공 여부
          example: true
        message:
          type: string
          description: 응답 메시지
          example: 사용자 프로필이 성공적으로 삭제되었습니다.
        deletedUserId:
          type: string
          description: 삭제된 사용자 ID
          example: dudtod1596
        deletedAt:
          type: string
          description: 삭제 시각
          example: '2024-01-01T12:00:00.000Z'
      required:
        - success
        - message
        - deletedUserId
        - deletedAt
    ApiResponseUserProfileCompletenessResponseDto:
      type: object
      properties: {}
    UserProfileCompletenessResponseDto:
      type: object
      properties:
        hasProfile:
          type: boolean
          description: 프로필 존재 여부
          example: true
        hasBasicInfo:
          type: boolean
          description: 기본 정보 완성 여부 (닉네임, 실명)
          example: true
        isComplete:
          type: boolean
          description: 프로필 완성 여부
          example: false
        missingFields:
          description: 누락된 필드 목록
          example:
            - fullName
            - introduce
          type: array
          items:
            type: string
        profile:
          description: 프로필 정보 (존재하는 경우만)
          allOf:
            - $ref: '#/components/schemas/UserProfileDto'
        completenessScore:
          type: number
          description: 완성도 점수 (0-100)
          example: 75
        message:
          type: string
          description: 응답 메시지
          example: 프로필 완성도를 확인했습니다.
      required:
        - hasProfile
        - hasBasicInfo
        - isComplete
        - missingFields
        - completenessScore
        - message
    ApiResponseUserProfileUpsertResponseDto:
      type: object
      properties: {}
    UserProfileUpsertResponseDto:
      type: object
      properties:
        profile:
          description: 처리된 사용자 프로필 정보
          allOf:
            - $ref: '#/components/schemas/UserProfileDto'
        isNew:
          type: boolean
          description: 새로 생성된 프로필인지 여부
          example: false
        updatedFields:
          description: 수정된 필드 목록 (수정의 경우만)
          example:
            - nickname
            - introduce
          type: array
          items:
            type: string
        message:
          type: string
          description: 응답 메시지
          example: 사용자 프로필이 성공적으로 수정되었습니다.
        operation:
          type: string
          description: 처리 유형
          enum:
            - created
            - updated
          example: updated
      required:
        - profile
        - isNew
        - message
        - operation
    ApiResponseBasicProfileCreationResponseDto:
      type: object
      properties: {}
    BasicProfileCreationResponseDto:
      type: object
      properties:
        profile:
          description: 생성된 기본 프로필 정보
          allOf:
            - $ref: '#/components/schemas/UserProfileDto'
        completeness:
          type: object
          description: 프로필 완성도 정보
          properties:
            hasBasicInfo:
              type: boolean
              description: 기본 정보 완성 여부
            isComplete:
              type: boolean
              description: 프로필 완성 여부
            missingFields:
              type: array
              items:
                type: string
              description: 누락된 필드들
        nextSteps:
          description: 다음 단계 가이드 메시지
          example:
            - 실명을 입력하여 프로필을 완성해주세요.
            - 프로필 사진을 등록하여 더 친근한 인상을 만들어보세요.
          type: array
          items:
            type: string
        message:
          type: string
          description: 응답 메시지
          example: 회원가입 기본 프로필이 성공적으로 생성되었습니다.
        completenessScore:
          type: number
          description: 완성도 점수 (0-100)
          example: 50
      required:
        - profile
        - completeness
        - nextSteps
        - message
        - completenessScore
    ApiResponseTokenResponseDto:
      type: object
      properties: {}
    TokenResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: 액세스 토큰
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: 리프레시 토큰
        tokenType:
          type: string
          example: Bearer
          description: 토큰 타입
        expiresIn:
          type: number
          example: 1800
          description: 액세스 토큰 만료 시간(초)
      required:
        - accessToken
        - refreshToken
        - tokenType
        - expiresIn
    LoginRequestDto:
      type: object
      properties:
        id:
          type: string
          example: user123
          description: 사용자 아이디
        password:
          type: string
          example: Password123!
          description: 사용자 비밀번호
      required:
        - id
        - password
    ApiResponseLogoutResponseDto:
      type: object
      properties: {}
    LogoutResponseDto:
      type: object
      properties:
        success:
          type: boolean
          description: 로그아웃 성공 여부
          example: true
        loggedOutAt:
          type: string
          description: 로그아웃 완료 시간
          example: '2023-01-01T00:00:00Z'
        message:
          type: string
          description: 응답 메시지
          example: 성공적으로 로그아웃되었습니다.
      required:
        - success
        - loggedOutAt
        - message
    RefreshTokenRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: 리프레시 토큰
      required:
        - refreshToken
    ApiResponseValidationResultResponseDto:
      type: object
      properties: {}
    ValidationResultResponseDto:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
          description: 토큰 유효 여부
        userId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: 사용자 ID
        email:
          type: string
          example: user@example.com
          description: 사용자 이메일
        role:
          type: string
          example: MENTEE
          description: 사용자 역할
          enum:
            - MENTEE
            - MENTOR
            - ADMIN
      required:
        - isValid
    ValidateTokenRequestDto:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: 검증할 액세스 토큰
      required:
        - token
    ApiResponseVerificationCodeResponseDto:
      type: object
      properties: {}
    VerificationCodeResponseDto:
      type: object
      properties:
        verificationId:
          type: string
          description: 검증 ID
          example: 550e8400-e29b-41d4-a716-446655440000
        expiresAt:
          type: string
          description: 인증 만료 시간 (ISO 형식)
          example: '2023-06-15T09:00:00.000Z'
      required:
        - verificationId
        - expiresAt
    AuthType:
      type: string
      enum:
        - PHONE
        - EMAIL
        - COMPANY
      description: 인증 유형
    SendVerificationCodeRequestDto:
      type: object
      properties:
        authType:
          description: 인증 유형
          example: EMAIL
          allOf:
            - $ref: '#/components/schemas/AuthType'
        target:
          type: string
          description: 인증 대상 (이메일 또는 전화번호)
          example: user@example.com
      required:
        - authType
        - target
    ApiResponseVerificationResultResponseDto:
      type: object
      properties: {}
    VerificationResultResponseDto:
      type: object
      properties:
        success:
          type: boolean
          description: 인증 성공 여부
          example: true
        sessionId:
          type: string
          description: 인증 세션 ID
          example: 550e8400-e29b-41d4-a716-446655440000
        status:
          type: string
          description: 인증 상태
          enum:
            - PENDING
            - COMPLETED
            - FAILED
            - EXPIRED
          example: COMPLETED
        message:
          type: string
          description: 결과 메시지
          example: 백준 ID 인증이 완료되었습니다
        completedAt:
          type: string
          description: 완료 시간 (성공한 경우에만)
          example: '2025-06-01T12:30:00.000Z'
        errorReason:
          type: string
          description: 실패 사유 (실패한 경우에만)
          example: 인증 문자열이 일치하지 않습니다
        attempts:
          type: number
          description: 현재 시도 횟수
          example: 2
        remainingAttempts:
          type: number
          description: 남은 시도 횟수
          example: 1
      required:
        - success
        - sessionId
        - status
        - message
        - attempts
        - remainingAttempts
    VerifyCodeRequestDto:
      type: object
      properties:
        verificationId:
          type: string
          description: 검증 ID
          example: '1703123456789'
        code:
          type: string
          description: 인증 코드 (6자리)
          example: '123456'
      required:
        - verificationId
        - code
    ExchangeAuthCodeRequestDto:
      type: object
      properties:
        code:
          type: string
          example: a1b2c3d4...
          description: 인증 코드
      required:
        - code
    ConfirmSocialLinkRequestDto:
      type: object
      properties:
        token:
          type: string
          example: a1b2c3d4...
          description: 임시 연결 토큰
        approved:
          type: boolean
          example: true
          description: 계정 연결 승인 여부
      required:
        - token
        - approved
    ApiResponseFindIdResponseDto:
      type: object
      properties: {}
    FindIdResponseDto:
      type: object
      properties:
        success:
          type: boolean
          description: 찾기 성공 여부
          example: true
        maskedId:
          type: string
          description: 마스킹된 아이디
          example: u***123
        message:
          type: string
          description: 응답 메시지
          example: 가입된 아이디를 찾았습니다.
      required:
        - success
        - message
    FindIdRequestDto:
      type: object
      properties:
        authType:
          description: 인증 방식 ('EMAIL' 또는 'PHONE')
          example: PHONE
          allOf:
            - $ref: '#/components/schemas/AuthType'
        target:
          type: string
          description: 인증 대상 (이메일 주소 또는 전화번호)
          example: 010-1234-5678
        verificationId:
          type: string
          description: 인증 ID (인증 코드 발송 후 받은 ID)
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        verificationCode:
          type: string
          description: 인증 코드
          example: '123456'
      required:
        - authType
        - target
        - verificationId
        - verificationCode
    ApiResponseResetPasswordResponseDto:
      type: object
      properties: {}
    ResetPasswordResponseDto:
      type: object
      properties:
        success:
          type: boolean
          description: 비밀번호 재설정 성공 여부
          example: true
        resetAt:
          type: string
          description: 재설정 완료 시간
          example: '2023-01-01T00:00:00Z'
        message:
          type: string
          description: 응답 메시지
          example: 비밀번호가 성공적으로 재설정되었습니다.
      required:
        - success
        - resetAt
        - message
    ResetPasswordRequestDto:
      type: object
      properties:
        email:
          type: string
          description: 사용자 이메일
          example: user@example.com
        verificationId:
          type: string
          description: 인증 ID (인증 코드 발송 후 받은 ID)
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        verificationCode:
          type: string
          description: 인증 코드
          example: '123456'
        newPassword:
          type: string
          description: 새 비밀번호
          example: NewPassword123!
      required:
        - email
        - verificationId
        - verificationCode
        - newPassword
    ApiResponseAvailabilityResponseDto:
      type: object
      properties: {}
    AvailabilityResponseDto:
      type: object
      properties:
        available:
          type: boolean
          description: 사용 가능 여부
          example: true
      required:
        - available
    CheckEmailAvailabilityRequestDto:
      type: object
      properties:
        email:
          type: string
          description: 확인할 이메일 주소
          example: user@example.com
          format: email
      required:
        - email
    CheckUserIdAvailabilityRequestDto:
      type: object
      properties:
        userId:
          type: string
          description: 확인할 사용자 ID
          example: user123
          minLength: 4
          maxLength: 20
      required:
        - userId
    MailRequestDto:
      type: object
      properties:
        to:
          description: 수신자 이메일
          example: user@example.com
          oneOf:
            - type: string
              format: email
            - type: array
              items:
                type: string
                format: email
        template:
          type: string
          description: 템플릿 유형
          example: email_verification
          enum:
            - email_verification
            - password_recovery
            - reservation_create
            - reservation_fix
            - reservation_cancel
            - reservation_change
            - reservation_prenotice
            - verification_code
        data:
          type: object
          description: 템플릿 컨텍스트 (변수)
          example:
            userName: 홍길동
            authNumber: '123456'
        locale:
          type: string
          description: 언어 설정
          example: ko
          enum:
            - ko
            - en
          default: ko
        attachments:
          type: array
          description: 첨부 파일
          items:
            type: object
            properties:
              filename:
                type: string
              content:
                type: string
                format: binary
      required:
        - to
        - template
        - data
    ApiResponseMailAuditResponseDto:
      type: object
      properties: {}
    MailStatus:
      type: string
      enum:
        - PENDING
        - SENT
        - FAILED
      description: 메일 상태
    MailAuditResponseDto:
      type: object
      properties:
        idx:
          type: number
          description: 메일 감사 ID
          example: 1
        mailId:
          type: string
          description: 메일 ID
          example: 550e8400-e29b-41d4-a716-446655440000
        template:
          type: string
          description: 메일 템플릿
          example: email_verification
        recipients:
          description: 수신자 목록
          example:
            - user@example.com
            - admin@example.com
          type: array
          items:
            type: string
        status:
          description: 메일 상태
          example: SENT
          allOf:
            - $ref: '#/components/schemas/MailStatus'
        sentAt:
          type: object
          description: 발송 시간
          example: '2023-06-15T09:30:00.000Z'
        error:
          type: string
          description: 오류 메시지
          example: SMTP connection failed
        createdAt:
          type: string
          description: 생성 시간
          example: '2023-06-15T09:25:00.000Z'
        context:
          type: object
          description: 메일 컨텍스트 데이터
          example:
            username: john_doe
            verificationCode: '123456'
        locale:
          type: string
          description: 언어 설정
          example: ko
      required:
        - idx
        - mailId
        - template
        - recipients
        - status
        - createdAt
        - context
        - locale
    CreateMentorProfileDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 ID
          example: user123
        tagIds:
          description: 멘토 태그 ID 목록
          example:
            - 1
            - 2
            - 3
          type: array
          items:
            type: number
        introductionTitle:
          type: string
          description: 멘토 소개 제목
          example: 10년차 개발자의 노하우
          maxLength: 100
        introductionContent:
          type: string
          description: 멘토 소개 내용
          example: 실전에서 사용하는...
      required:
        - userId
        - tagIds
    MentorTagDto:
      type: object
      properties:
        idx:
          type: number
          description: 태그 IDX
          example: 1
        name:
          type: string
          description: 태그 이름
          example: 프론트엔드
        category:
          type: string
          description: 태그 카테고리
          enum:
            - job
            - experience
            - company
          example: job
        displayOrder:
          type: number
          description: 표시 순서
          example: 1
        isActive:
          type: boolean
          description: 활성화 여부
          example: true
        createdAt:
          format: date-time
          type: string
          description: 생성일
        updatedAt:
          format: date-time
          type: string
          description: 수정일
      required:
        - idx
        - name
        - category
        - displayOrder
        - isActive
        - createdAt
        - updatedAt
    MentorProfileDto:
      type: object
      properties:
        idx:
          type: number
          description: 멘토 프로필 IDX
          example: 1
        userId:
          type: string
          description: 연결된 유저의 고유 ID
          example: cld2clvaw00003575n5da3kch
        introductionTitle:
          type: string
          description: 멘토링 소개 제목
          example: 실전처럼 배우는 프론트엔드 테스트 코드 작성법
        introductionContent:
          type: string
          description: 멘토링 소개 내용 (마크다운)
        baekjoonTierDisplay:
          type: boolean
          description: 백준 티어 표시 여부
          example: true
        mentoringCount:
          type: number
          description: 총 멘토링 횟수
          example: 15
        totalReviewCount:
          type: number
          description: 총 리뷰 개수
          example: 12
        averageRating:
          type: number
          description: 평균 평점 (0.0 ~ 5.0)
          example: 4.8
        isVerified:
          type: boolean
          description: 멘토 인증 여부
          example: true
        isActive:
          type: boolean
          description: 멘토 활동 여부
          example: true
        profileCompletion:
          type: number
          description: 프로필 완성도 (0 ~ 100)
          example: 95
        tags:
          description: 멘토 태그 목록
          type: array
          items:
            $ref: '#/components/schemas/MentorTagDto'
        createdAt:
          format: date-time
          type: string
          description: 생성일
        updatedAt:
          format: date-time
          type: string
          description: 수정일
      required:
        - idx
        - userId
        - baekjoonTierDisplay
        - mentoringCount
        - totalReviewCount
        - averageRating
        - isVerified
        - isActive
        - profileCompletion
        - tags
        - createdAt
        - updatedAt
    UpdateMentorProfileDto:
      type: object
      properties:
        introductionTitle:
          type: string
          description: 멘토링 소개 제목
          example: 실전처럼 배우는 프론트엔드 테스트 코드 작성법
        introductionContent:
          type: string
          description: 멘토링 소개 내용 (마크다운)
        baekjoonTierDisplay:
          type: boolean
          description: 백준 티어 표시 여부
          example: true
        tagIds:
          description: 멘토의 기술 스택 및 직무 태그 ID 목록
          example:
            - 1
            - 5
            - 10
          type: array
          items:
            type: number
      required:
        - baekjoonTierDisplay
        - tagIds
    DeletionResponseDto:
      type: object
      properties:
        success:
          type: boolean
          description: 작업 성공 여부
          example: true
        message:
          type: string
          description: 응답 메시지
          example: 성공적으로 삭제되었습니다.
      required:
        - success
        - message
    CreateBasicProfileDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 로그인 아이디 (6~20자, 영문/숫자/특수문자)
          example: dudtod1596
        nickname:
          type: string
          description: 닉네임 (2~50자, 한글/영문만 허용)
          example: 코딩마스터
        profileImageUrl:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/profile/image.jpg
      required:
        - userId
        - nickname
    ApiResponseVerificationStatusResponseDto:
      type: object
      properties: {}
    VerificationStatusType:
      type: string
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED
        - FAILED
        - EXPIRED
      description: 인증 상태
    VerificationStatusResponseDto:
      type: object
      properties:
        sessionId:
          type: string
          description: 인증 세션 ID
          example: 550e8400-e29b-41d4-a716-446655440000
        handle:
          type: string
          description: 백준 ID
          example: solved_user123
        verificationString:
          type: string
          description: 인증 문자열 (프로필 이름에 설정해야 하는 문자열)
          example: 배부른고양이847293
        status:
          description: 인증 상태
          example: PENDING
          allOf:
            - $ref: '#/components/schemas/VerificationStatusType'
        attempts:
          type: number
          description: 현재 시도 횟수
          example: 1
        maxAttempts:
          type: number
          description: 최대 시도 횟수
          example: 3
        createdAt:
          type: string
          description: 생성 시간
          example: '2025-06-01T12:00:00.000Z'
        expiresAt:
          type: string
          description: 만료 시간
          example: '2025-06-01T13:00:00.000Z'
        completedAt:
          type: string
          description: 완료 시간 (완료된 경우에만)
          example: '2025-06-01T12:30:00.000Z'
        errorReason:
          type: string
          description: 실패 사유 (실패한 경우에만)
          example: 인증 문자열이 일치하지 않습니다
      required:
        - sessionId
        - handle
        - verificationString
        - status
        - attempts
        - maxAttempts
        - createdAt
        - expiresAt
    StartBaekjoonVerificationDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 ID
          example: user123
        baekjoonHandle:
          type: string
          description: 백준 핸들
          example: solved_user123
      required:
        - userId
        - baekjoonHandle
    CompleteBaekjoonVerificationDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 ID
          example: user123
        baekjoonHandle:
          type: string
          description: 백준 핸들
          example: solved_user123
        verificationSessionId:
          type: string
          description: 인증 세션 ID
          example: 550e8400-e29b-41d4-a716-446655440000
      required:
        - userId
        - baekjoonHandle
        - verificationSessionId
    ApiResponseTagStatisticsOutputDto:
      type: object
      properties: {}
    TagDto:
      type: object
      properties:
        key:
          type: string
          description: 태그 키
          example: implementation
        name:
          type: string
          description: 태그 이름
          example: 구현
      required:
        - key
        - name
    TopTagDto:
      type: object
      properties:
        tag:
          description: 태그 정보
          allOf:
            - $ref: '#/components/schemas/TagDto'
        solvedCount:
          type: number
          description: 해당 태그로 해결한 문제 수
          example: 25
          minimum: 0
      required:
        - tag
        - solvedCount
    TagStatisticsOutputDto:
      type: object
      properties:
        handle:
          type: string
          description: 백준 사용자 핸들
          example: dudtod1596
        tags:
          description: 상위 태그 목록 (해결한 문제 수 기준)
          type: array
          items:
            $ref: '#/components/schemas/TopTagDto'
        totalTagCount:
          type: number
          description: 총 태그 수
          example: 25
          minimum: 0
        totalSolvedCount:
          type: number
          description: 총 해결한 문제 수
          example: 150
          minimum: 0
        tierStats:
          type: object
          description: '티어별 통계 (티어명: 문제 수)'
          example:
            Bronze V: 10
            Bronze IV: 15
            Silver I: 20
            Gold III: 30
        lastSynced:
          format: date-time
          type: string
          description: 통계 데이터가 마지막으로 동기화된 시간
          example: '2025-05-31T13:00:00Z'
      required:
        - handle
        - tags
        - totalTagCount
        - totalSolvedCount
        - tierStats
        - lastSynced
    ApiResponseMentorEligibilityDto:
      type: object
      properties: {}
    MentorEligibilityDto:
      type: object
      properties:
        isEligible:
          type: boolean
          description: 멘토 자격 충족 여부
          example: true
        currentTier:
          type: string
          description: 현재 백준 티어
          example: Platinum III
        requirement:
          type: string
          description: 멘토 자격 요건
          example: 백준 티어 플래티넘 3 이상
      required:
        - isEligible
        - currentTier
        - requirement
    ApiResponseMentorTagsResponseDto:
      type: object
      properties: {}
    MentorTagsResponseDto:
      type: object
      properties:
        jobTags:
          description: 직무 태그 목록
          type: array
          items:
            $ref: '#/components/schemas/MentorTagDto'
        experienceTags:
          description: 연차 태그 목록
          type: array
          items:
            $ref: '#/components/schemas/MentorTagDto'
        companyTags:
          description: 회사 태그 목록
          type: array
          items:
            $ref: '#/components/schemas/MentorTagDto'
      required:
        - jobTags
        - experienceTags
        - companyTags
    ApiResponseMentorProfileDto:
      type: object
      properties: {}
    ApiResponseBoolean:
      type: object
      properties: {}
    Boolean:
      type: object
      properties: {}
    StartVerificationRequestDto:
      type: object
      properties:
        email:
          type: string
          description: 사용자 이메일
          example: user@example.com
        handle:
          type: string
          description: 백준 ID (사용자명)
          example: solved_user123
      required:
        - email
        - handle
    CompleteVerificationRequestDto:
      type: object
      properties:
        sessionId:
          type: string
          description: 인증 세션 ID
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
        email:
          type: string
          description: 사용자 이메일
          example: user@example.com
        handle:
          type: string
          description: 백준 ID (사용자명)
          example: solved_user123
      required:
        - sessionId
        - email
        - handle
    ApiResponseBaekjoonProfileResponseDto:
      type: object
      properties: {}
    BaekjoonProfileResponseDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 ID
          example: 550e8400-e29b-41d4-a716-446655440000
        handle:
          type: string
          description: 백준 ID
          example: solved_user123
        tier:
          type: string
          description: 현재 티어
          example: Gold V
        rating:
          type: number
          description: 레이팅
          example: 2145
        rank:
          type: number
          description: 전체 순위
          example: 1234
        solvedCount:
          type: number
          description: 해결한 문제 수
          example: 150
        profileImageUrl:
          type: string
          description: 프로필 이미지 URL
          example: https://static.solved.ac/uploads/profile/picture.png
        bio:
          type: string
          description: 사용자 bio
          example: Hello World
        lastUpdated:
          type: string
          description: 마지막 업데이트 시간
          example: '2025-06-01T12:00:00.000Z'
        isMentorEligible:
          type: boolean
          description: 멘토 자격 여부 (Platinum 3 이상)
          example: true
      required:
        - userId
        - handle
        - tier
        - rating
        - rank
        - solvedCount
        - lastUpdated
        - isMentorEligible
    ApiResponseTagStatisticsResponseDto:
      type: object
      properties: {}
    TagInfoDto:
      type: object
      properties:
        tagId:
          type: number
          description: 태그 ID
          example: 1
        key:
          type: string
          description: 태그 키 (영문)
          example: implementation
        nameKo:
          type: string
          description: 태그 이름 (한국어)
          example: 구현
        problemCount:
          type: number
          description: 해결한 문제 수
          example: 25
        rating:
          type: number
          description: 태그별 레이팅
          example: 1200
        ratingByProblemsSum:
          type: number
          description: 문제별 레이팅 합계
          example: 15000
        ratingByClass:
          type: number
          description: 클래스별 레이팅
          example: 1100
        ratingBySolvedCount:
          type: number
          description: 해결 수별 레이팅
          example: 1300
      required:
        - tagId
        - key
        - nameKo
        - problemCount
        - rating
        - ratingByProblemsSum
        - ratingByClass
        - ratingBySolvedCount
    TagStatisticsResponseDto:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 ID
          example: 550e8400-e29b-41d4-a716-446655440000
        handle:
          type: string
          description: 백준 ID
          example: solved_user123
        tags:
          description: 태그별 통계 목록
          type: array
          items:
            $ref: '#/components/schemas/TagInfoDto'
        totalTagCount:
          type: number
          description: 총 태그 수
          example: 15
        totalSolvedCount:
          type: number
          description: 총 해결한 문제 수
          example: 150
        averageRating:
          type: number
          description: 평균 레이팅
          example: 1250
        lastUpdated:
          type: string
          description: 마지막 업데이트 시간
          example: '2025-06-01T12:00:00.000Z'
      required:
        - userId
        - handle
        - tags
        - totalTagCount
        - totalSolvedCount
        - averageRating
        - lastUpdated
