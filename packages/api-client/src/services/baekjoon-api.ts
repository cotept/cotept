/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BaekjoonProfileResponseWrapper } from '../types';
// @ts-ignore
import type { CompleteVerificationRequestDto } from '../types';
// @ts-ignore
import type { GetAllUsers400Response } from '../types';
// @ts-ignore
import type { GetAllUsers401Response } from '../types';
// @ts-ignore
import type { GetAllUsers403Response } from '../types';
// @ts-ignore
import type { GetAllUsers500Response } from '../types';
// @ts-ignore
import type { StartBaekjoonVerification408Response } from '../types';
// @ts-ignore
import type { StartBaekjoonVerification429Response } from '../types';
// @ts-ignore
import type { StartBaekjoonVerification503Response } from '../types';
// @ts-ignore
import type { StartVerificationRequestDto } from '../types';
// @ts-ignore
import type { TagStatisticsResponseWrapper } from '../types';
// @ts-ignore
import type { VerificationResultResponseWrapper } from '../types';
// @ts-ignore
import type { VerificationStatusResponseWrapper } from '../types';
/**
 * BaekjoonApi - axios parameter creator
 * @export
 */
export const BaekjoonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * solved.ac 프로필 이름을 확인하여 백준 ID 인증을 완료합니다.
         * @summary 백준 ID 인증 완료
         * @param {CompleteVerificationRequestDto} completeVerificationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeVerification: async (completeVerificationRequestDto: CompleteVerificationRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeVerificationRequestDto' is not null or undefined
            assertParamExists('completeVerification', 'completeVerificationRequestDto', completeVerificationRequestDto)
            const localVarPath = `/api/v1/baekjoon/verification/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeVerificationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자의 백준 프로필 정보를 조회합니다. handle을 제공하지 않으면 현재 사용자의 프로필을 조회합니다.
         * @summary 백준 프로필 조회
         * @param {string} email 사용자 이메일
         * @param {string} handle 백준 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (email: string, handle: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getProfile', 'email', email)
            // verify required parameter 'handle' is not null or undefined
            assertParamExists('getProfile', 'handle', handle)
            const localVarPath = `/api/v1/baekjoon/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (handle !== undefined) {
                localVarQueryParameter['handle'] = handle;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자의 백준 태그별 문제 해결 통계를 조회합니다.
         * @summary 백준 태그 통계 조회
         * @param {string} email 사용자 이메일
         * @param {string} handle 백준 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatistics: async (email: string, handle: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getStatistics', 'email', email)
            // verify required parameter 'handle' is not null or undefined
            assertParamExists('getStatistics', 'handle', handle)
            const localVarPath = `/api/v1/baekjoon/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (handle !== undefined) {
                localVarQueryParameter['handle'] = handle;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 진행 중인 인증 세션의 상태를 조회합니다.
         * @summary 인증 상태 조회
         * @param {string} userId 사용자 ID (이메일 형식)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerificationStatus: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getVerificationStatus', 'userId', userId)
            const localVarPath = `/api/v1/baekjoon/verification/status/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 백준 ID 인증 프로세스를 시작하고 인증 문자열을 발급받습니다.
         * @summary 백준 ID 인증 시작
         * @param {StartVerificationRequestDto} startVerificationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startVerification: async (startVerificationRequestDto: StartVerificationRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startVerificationRequestDto' is not null or undefined
            assertParamExists('startVerification', 'startVerificationRequestDto', startVerificationRequestDto)
            const localVarPath = `/api/v1/baekjoon/verification/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startVerificationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BaekjoonApi - functional programming interface
 * @export
 */
export const BaekjoonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BaekjoonApiAxiosParamCreator(configuration)
    return {
        /**
         * solved.ac 프로필 이름을 확인하여 백준 ID 인증을 완료합니다.
         * @summary 백준 ID 인증 완료
         * @param {CompleteVerificationRequestDto} completeVerificationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeVerification(completeVerificationRequestDto: CompleteVerificationRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResultResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeVerification(completeVerificationRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BaekjoonApi.completeVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자의 백준 프로필 정보를 조회합니다. handle을 제공하지 않으면 현재 사용자의 프로필을 조회합니다.
         * @summary 백준 프로필 조회
         * @param {string} email 사용자 이메일
         * @param {string} handle 백준 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(email: string, handle: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaekjoonProfileResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(email, handle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BaekjoonApi.getProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자의 백준 태그별 문제 해결 통계를 조회합니다.
         * @summary 백준 태그 통계 조회
         * @param {string} email 사용자 이메일
         * @param {string} handle 백준 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatistics(email: string, handle: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagStatisticsResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatistics(email, handle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BaekjoonApi.getStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 진행 중인 인증 세션의 상태를 조회합니다.
         * @summary 인증 상태 조회
         * @param {string} userId 사용자 ID (이메일 형식)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVerificationStatus(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationStatusResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVerificationStatus(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BaekjoonApi.getVerificationStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 백준 ID 인증 프로세스를 시작하고 인증 문자열을 발급받습니다.
         * @summary 백준 ID 인증 시작
         * @param {StartVerificationRequestDto} startVerificationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startVerification(startVerificationRequestDto: StartVerificationRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationStatusResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startVerification(startVerificationRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BaekjoonApi.startVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BaekjoonApi - factory interface
 * @export
 */
export const BaekjoonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BaekjoonApiFp(configuration)
    return {
        /**
         * solved.ac 프로필 이름을 확인하여 백준 ID 인증을 완료합니다.
         * @summary 백준 ID 인증 완료
         * @param {BaekjoonApiCompleteVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeVerification(requestParameters: BaekjoonApiCompleteVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationResultResponseWrapper> {
            return localVarFp.completeVerification(requestParameters.completeVerificationRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자의 백준 프로필 정보를 조회합니다. handle을 제공하지 않으면 현재 사용자의 프로필을 조회합니다.
         * @summary 백준 프로필 조회
         * @param {BaekjoonApiGetProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(requestParameters: BaekjoonApiGetProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<BaekjoonProfileResponseWrapper> {
            return localVarFp.getProfile(requestParameters.email, requestParameters.handle, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자의 백준 태그별 문제 해결 통계를 조회합니다.
         * @summary 백준 태그 통계 조회
         * @param {BaekjoonApiGetStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatistics(requestParameters: BaekjoonApiGetStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TagStatisticsResponseWrapper> {
            return localVarFp.getStatistics(requestParameters.email, requestParameters.handle, options).then((request) => request(axios, basePath));
        },
        /**
         * 진행 중인 인증 세션의 상태를 조회합니다.
         * @summary 인증 상태 조회
         * @param {BaekjoonApiGetVerificationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerificationStatus(requestParameters: BaekjoonApiGetVerificationStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationStatusResponseWrapper> {
            return localVarFp.getVerificationStatus(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 백준 ID 인증 프로세스를 시작하고 인증 문자열을 발급받습니다.
         * @summary 백준 ID 인증 시작
         * @param {BaekjoonApiStartVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startVerification(requestParameters: BaekjoonApiStartVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationStatusResponseWrapper> {
            return localVarFp.startVerification(requestParameters.startVerificationRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BaekjoonApi - interface
 * @export
 * @interface BaekjoonApi
 */
export interface BaekjoonApiInterface {
    /**
     * solved.ac 프로필 이름을 확인하여 백준 ID 인증을 완료합니다.
     * @summary 백준 ID 인증 완료
     * @param {BaekjoonApiCompleteVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApiInterface
     */
    completeVerification(requestParameters: BaekjoonApiCompleteVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationResultResponseWrapper>;

    /**
     * 사용자의 백준 프로필 정보를 조회합니다. handle을 제공하지 않으면 현재 사용자의 프로필을 조회합니다.
     * @summary 백준 프로필 조회
     * @param {BaekjoonApiGetProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApiInterface
     */
    getProfile(requestParameters: BaekjoonApiGetProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<BaekjoonProfileResponseWrapper>;

    /**
     * 사용자의 백준 태그별 문제 해결 통계를 조회합니다.
     * @summary 백준 태그 통계 조회
     * @param {BaekjoonApiGetStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApiInterface
     */
    getStatistics(requestParameters: BaekjoonApiGetStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TagStatisticsResponseWrapper>;

    /**
     * 진행 중인 인증 세션의 상태를 조회합니다.
     * @summary 인증 상태 조회
     * @param {BaekjoonApiGetVerificationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApiInterface
     */
    getVerificationStatus(requestParameters: BaekjoonApiGetVerificationStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationStatusResponseWrapper>;

    /**
     * 백준 ID 인증 프로세스를 시작하고 인증 문자열을 발급받습니다.
     * @summary 백준 ID 인증 시작
     * @param {BaekjoonApiStartVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApiInterface
     */
    startVerification(requestParameters: BaekjoonApiStartVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationStatusResponseWrapper>;

}

/**
 * Request parameters for completeVerification operation in BaekjoonApi.
 * @export
 * @interface BaekjoonApiCompleteVerificationRequest
 */
export interface BaekjoonApiCompleteVerificationRequest {
    /**
     * 
     * @type {CompleteVerificationRequestDto}
     * @memberof BaekjoonApiCompleteVerification
     */
    readonly completeVerificationRequestDto: CompleteVerificationRequestDto
}

/**
 * Request parameters for getProfile operation in BaekjoonApi.
 * @export
 * @interface BaekjoonApiGetProfileRequest
 */
export interface BaekjoonApiGetProfileRequest {
    /**
     * 사용자 이메일
     * @type {string}
     * @memberof BaekjoonApiGetProfile
     */
    readonly email: string

    /**
     * 백준 ID
     * @type {string}
     * @memberof BaekjoonApiGetProfile
     */
    readonly handle: string
}

/**
 * Request parameters for getStatistics operation in BaekjoonApi.
 * @export
 * @interface BaekjoonApiGetStatisticsRequest
 */
export interface BaekjoonApiGetStatisticsRequest {
    /**
     * 사용자 이메일
     * @type {string}
     * @memberof BaekjoonApiGetStatistics
     */
    readonly email: string

    /**
     * 백준 ID
     * @type {string}
     * @memberof BaekjoonApiGetStatistics
     */
    readonly handle: string
}

/**
 * Request parameters for getVerificationStatus operation in BaekjoonApi.
 * @export
 * @interface BaekjoonApiGetVerificationStatusRequest
 */
export interface BaekjoonApiGetVerificationStatusRequest {
    /**
     * 사용자 ID (이메일 형식)
     * @type {string}
     * @memberof BaekjoonApiGetVerificationStatus
     */
    readonly userId: string
}

/**
 * Request parameters for startVerification operation in BaekjoonApi.
 * @export
 * @interface BaekjoonApiStartVerificationRequest
 */
export interface BaekjoonApiStartVerificationRequest {
    /**
     * 
     * @type {StartVerificationRequestDto}
     * @memberof BaekjoonApiStartVerification
     */
    readonly startVerificationRequestDto: StartVerificationRequestDto
}

/**
 * BaekjoonApi - object-oriented interface
 * @export
 * @class BaekjoonApi
 * @extends {BaseAPI}
 */
export class BaekjoonApi extends BaseAPI implements BaekjoonApiInterface {
    /**
     * solved.ac 프로필 이름을 확인하여 백준 ID 인증을 완료합니다.
     * @summary 백준 ID 인증 완료
     * @param {BaekjoonApiCompleteVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApi
     */
    public completeVerification(requestParameters: BaekjoonApiCompleteVerificationRequest, options?: RawAxiosRequestConfig) {
        return BaekjoonApiFp(this.configuration).completeVerification(requestParameters.completeVerificationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자의 백준 프로필 정보를 조회합니다. handle을 제공하지 않으면 현재 사용자의 프로필을 조회합니다.
     * @summary 백준 프로필 조회
     * @param {BaekjoonApiGetProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApi
     */
    public getProfile(requestParameters: BaekjoonApiGetProfileRequest, options?: RawAxiosRequestConfig) {
        return BaekjoonApiFp(this.configuration).getProfile(requestParameters.email, requestParameters.handle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자의 백준 태그별 문제 해결 통계를 조회합니다.
     * @summary 백준 태그 통계 조회
     * @param {BaekjoonApiGetStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApi
     */
    public getStatistics(requestParameters: BaekjoonApiGetStatisticsRequest, options?: RawAxiosRequestConfig) {
        return BaekjoonApiFp(this.configuration).getStatistics(requestParameters.email, requestParameters.handle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 진행 중인 인증 세션의 상태를 조회합니다.
     * @summary 인증 상태 조회
     * @param {BaekjoonApiGetVerificationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApi
     */
    public getVerificationStatus(requestParameters: BaekjoonApiGetVerificationStatusRequest, options?: RawAxiosRequestConfig) {
        return BaekjoonApiFp(this.configuration).getVerificationStatus(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 백준 ID 인증 프로세스를 시작하고 인증 문자열을 발급받습니다.
     * @summary 백준 ID 인증 시작
     * @param {BaekjoonApiStartVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaekjoonApi
     */
    public startVerification(requestParameters: BaekjoonApiStartVerificationRequest, options?: RawAxiosRequestConfig) {
        return BaekjoonApiFp(this.configuration).startVerification(requestParameters.startVerificationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

