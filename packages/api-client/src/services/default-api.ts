/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateMentorProfileDto } from '../types';
// @ts-ignore
import type { DeletionResponseDto } from '../types';
// @ts-ignore
import type { MentorProfileDto } from '../types';
// @ts-ignore
import type { UpdateMentorProfileDto } from '../types';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 새 멘토 프로필 생성
         * @param {CreateMentorProfileDto} createMentorProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMentorProfile: async (createMentorProfileDto: CreateMentorProfileDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMentorProfileDto' is not null or undefined
            assertParamExists('createMentorProfile', 'createMentorProfileDto', createMentorProfileDto)
            const localVarPath = `/api/v1/mentor/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMentorProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멘토 프로필 비활성화 (논리적 삭제)
         * @param {number} idx 멘토 프로필 IDX
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMentorProfile: async (idx: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idx' is not null or undefined
            assertParamExists('deleteMentorProfile', 'idx', idx)
            const localVarPath = `/api/v1/mentor/profile/{idx}`
                .replace(`{${"idx"}}`, encodeURIComponent(String(idx)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 사용자의 멘토 프로필 정보를 조회합니다.
         * @summary 사용자 ID로 멘토 프로필 조회
         * @param {string} userId 조회할 사용자의 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentorProfile: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getMentorProfile', 'userId', userId)
            const localVarPath = `/api/v1/mentor/profile/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멘토 프로필 영구 삭제 (물리적 삭제)
         * @param {number} idx 멘토 프로필 IDX
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hardDeleteMentorProfile: async (idx: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idx' is not null or undefined
            assertParamExists('hardDeleteMentorProfile', 'idx', idx)
            const localVarPath = `/api/v1/mentor/profile/{idx}/permanent`
                .replace(`{${"idx"}}`, encodeURIComponent(String(idx)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멘토 프로필 정보 수정 (PUT)
         * @param {number} idx 멘토 프로필 IDX
         * @param {UpdateMentorProfileDto} updateMentorProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMentorProfile: async (idx: number, updateMentorProfileDto: UpdateMentorProfileDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idx' is not null or undefined
            assertParamExists('updateMentorProfile', 'idx', idx)
            // verify required parameter 'updateMentorProfileDto' is not null or undefined
            assertParamExists('updateMentorProfile', 'updateMentorProfileDto', updateMentorProfileDto)
            const localVarPath = `/api/v1/mentor/profile/{idx}`
                .replace(`{${"idx"}}`, encodeURIComponent(String(idx)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMentorProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 새 멘토 프로필 생성
         * @param {CreateMentorProfileDto} createMentorProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMentorProfile(createMentorProfileDto: CreateMentorProfileDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MentorProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMentorProfile(createMentorProfileDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMentorProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 멘토 프로필 비활성화 (논리적 삭제)
         * @param {number} idx 멘토 프로필 IDX
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMentorProfile(idx: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMentorProfile(idx, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMentorProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 사용자의 멘토 프로필 정보를 조회합니다.
         * @summary 사용자 ID로 멘토 프로필 조회
         * @param {string} userId 조회할 사용자의 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMentorProfile(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MentorProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMentorProfile(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMentorProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 멘토 프로필 영구 삭제 (물리적 삭제)
         * @param {number} idx 멘토 프로필 IDX
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hardDeleteMentorProfile(idx: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hardDeleteMentorProfile(idx, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.hardDeleteMentorProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 멘토 프로필 정보 수정 (PUT)
         * @param {number} idx 멘토 프로필 IDX
         * @param {UpdateMentorProfileDto} updateMentorProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMentorProfile(idx: number, updateMentorProfileDto: UpdateMentorProfileDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MentorProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMentorProfile(idx, updateMentorProfileDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMentorProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 새 멘토 프로필 생성
         * @param {DefaultApiCreateMentorProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMentorProfile(requestParameters: DefaultApiCreateMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorProfileDto> {
            return localVarFp.createMentorProfile(requestParameters.createMentorProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멘토 프로필 비활성화 (논리적 삭제)
         * @param {DefaultApiDeleteMentorProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMentorProfile(requestParameters: DefaultApiDeleteMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeletionResponseDto> {
            return localVarFp.deleteMentorProfile(requestParameters.idx, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 사용자의 멘토 프로필 정보를 조회합니다.
         * @summary 사용자 ID로 멘토 프로필 조회
         * @param {DefaultApiGetMentorProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentorProfile(requestParameters: DefaultApiGetMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorProfileDto> {
            return localVarFp.getMentorProfile(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멘토 프로필 영구 삭제 (물리적 삭제)
         * @param {DefaultApiHardDeleteMentorProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hardDeleteMentorProfile(requestParameters: DefaultApiHardDeleteMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeletionResponseDto> {
            return localVarFp.hardDeleteMentorProfile(requestParameters.idx, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멘토 프로필 정보 수정 (PUT)
         * @param {DefaultApiUpdateMentorProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMentorProfile(requestParameters: DefaultApiUpdateMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorProfileDto> {
            return localVarFp.updateMentorProfile(requestParameters.idx, requestParameters.updateMentorProfileDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary 새 멘토 프로필 생성
     * @param {DefaultApiCreateMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createMentorProfile(requestParameters: DefaultApiCreateMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorProfileDto>;

    /**
     * 
     * @summary 멘토 프로필 비활성화 (논리적 삭제)
     * @param {DefaultApiDeleteMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteMentorProfile(requestParameters: DefaultApiDeleteMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeletionResponseDto>;

    /**
     * 특정 사용자의 멘토 프로필 정보를 조회합니다.
     * @summary 사용자 ID로 멘토 프로필 조회
     * @param {DefaultApiGetMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMentorProfile(requestParameters: DefaultApiGetMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorProfileDto>;

    /**
     * 
     * @summary 멘토 프로필 영구 삭제 (물리적 삭제)
     * @param {DefaultApiHardDeleteMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    hardDeleteMentorProfile(requestParameters: DefaultApiHardDeleteMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeletionResponseDto>;

    /**
     * 
     * @summary 멘토 프로필 정보 수정 (PUT)
     * @param {DefaultApiUpdateMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateMentorProfile(requestParameters: DefaultApiUpdateMentorProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorProfileDto>;

}

/**
 * Request parameters for createMentorProfile operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateMentorProfileRequest
 */
export interface DefaultApiCreateMentorProfileRequest {
    /**
     * 
     * @type {CreateMentorProfileDto}
     * @memberof DefaultApiCreateMentorProfile
     */
    readonly createMentorProfileDto: CreateMentorProfileDto
}

/**
 * Request parameters for deleteMentorProfile operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteMentorProfileRequest
 */
export interface DefaultApiDeleteMentorProfileRequest {
    /**
     * 멘토 프로필 IDX
     * @type {number}
     * @memberof DefaultApiDeleteMentorProfile
     */
    readonly idx: number
}

/**
 * Request parameters for getMentorProfile operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMentorProfileRequest
 */
export interface DefaultApiGetMentorProfileRequest {
    /**
     * 조회할 사용자의 ID
     * @type {string}
     * @memberof DefaultApiGetMentorProfile
     */
    readonly userId: string
}

/**
 * Request parameters for hardDeleteMentorProfile operation in DefaultApi.
 * @export
 * @interface DefaultApiHardDeleteMentorProfileRequest
 */
export interface DefaultApiHardDeleteMentorProfileRequest {
    /**
     * 멘토 프로필 IDX
     * @type {number}
     * @memberof DefaultApiHardDeleteMentorProfile
     */
    readonly idx: number
}

/**
 * Request parameters for updateMentorProfile operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateMentorProfileRequest
 */
export interface DefaultApiUpdateMentorProfileRequest {
    /**
     * 멘토 프로필 IDX
     * @type {number}
     * @memberof DefaultApiUpdateMentorProfile
     */
    readonly idx: number

    /**
     * 
     * @type {UpdateMentorProfileDto}
     * @memberof DefaultApiUpdateMentorProfile
     */
    readonly updateMentorProfileDto: UpdateMentorProfileDto
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary 새 멘토 프로필 생성
     * @param {DefaultApiCreateMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMentorProfile(requestParameters: DefaultApiCreateMentorProfileRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createMentorProfile(requestParameters.createMentorProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멘토 프로필 비활성화 (논리적 삭제)
     * @param {DefaultApiDeleteMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMentorProfile(requestParameters: DefaultApiDeleteMentorProfileRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMentorProfile(requestParameters.idx, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 사용자의 멘토 프로필 정보를 조회합니다.
     * @summary 사용자 ID로 멘토 프로필 조회
     * @param {DefaultApiGetMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMentorProfile(requestParameters: DefaultApiGetMentorProfileRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMentorProfile(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멘토 프로필 영구 삭제 (물리적 삭제)
     * @param {DefaultApiHardDeleteMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public hardDeleteMentorProfile(requestParameters: DefaultApiHardDeleteMentorProfileRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).hardDeleteMentorProfile(requestParameters.idx, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멘토 프로필 정보 수정 (PUT)
     * @param {DefaultApiUpdateMentorProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMentorProfile(requestParameters: DefaultApiUpdateMentorProfileRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMentorProfile(requestParameters.idx, requestParameters.updateMentorProfileDto, options).then((request) => request(this.axios, this.basePath));
    }
}

