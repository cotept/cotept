/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EmptyWrapper } from '../types';
/**
 * GithubAuthApi - axios parameter creator
 * @export
 */
export const GithubAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * GitHub 인증 후 리다이렉트되는 엔드포인트입니다.
         * @summary GitHub 로그인 콜백
         * @param {string} [redirectUrl] 인증 성공 후 리다이렉트할 클라이언트 URL
         * @param {string} [code] GitHub 인증 코드 (자동으로 처리됨)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        githubCallback: async (redirectUrl?: string, code?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/github/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUrl !== undefined) {
                localVarQueryParameter['redirectUrl'] = redirectUrl;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GitHub OAuth 인증을 시작합니다.
         * @summary GitHub 로그인 시작
         * @param {string} [redirectUrl] 인증 성공 후 리다이렉트할 클라이언트 URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        githubLogin: async (redirectUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUrl !== undefined) {
                localVarQueryParameter['redirectUrl'] = redirectUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GithubAuthApi - functional programming interface
 * @export
 */
export const GithubAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GithubAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * GitHub 인증 후 리다이렉트되는 엔드포인트입니다.
         * @summary GitHub 로그인 콜백
         * @param {string} [redirectUrl] 인증 성공 후 리다이렉트할 클라이언트 URL
         * @param {string} [code] GitHub 인증 코드 (자동으로 처리됨)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async githubCallback(redirectUrl?: string, code?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.githubCallback(redirectUrl, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GithubAuthApi.githubCallback']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * GitHub OAuth 인증을 시작합니다.
         * @summary GitHub 로그인 시작
         * @param {string} [redirectUrl] 인증 성공 후 리다이렉트할 클라이언트 URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async githubLogin(redirectUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.githubLogin(redirectUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GithubAuthApi.githubLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GithubAuthApi - factory interface
 * @export
 */
export const GithubAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GithubAuthApiFp(configuration)
    return {
        /**
         * GitHub 인증 후 리다이렉트되는 엔드포인트입니다.
         * @summary GitHub 로그인 콜백
         * @param {GithubAuthApiGithubCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        githubCallback(requestParameters: GithubAuthApiGithubCallbackRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.githubCallback(requestParameters.redirectUrl, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * GitHub OAuth 인증을 시작합니다.
         * @summary GitHub 로그인 시작
         * @param {GithubAuthApiGithubLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        githubLogin(requestParameters: GithubAuthApiGithubLoginRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.githubLogin(requestParameters.redirectUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GithubAuthApi - interface
 * @export
 * @interface GithubAuthApi
 */
export interface GithubAuthApiInterface {
    /**
     * GitHub 인증 후 리다이렉트되는 엔드포인트입니다.
     * @summary GitHub 로그인 콜백
     * @param {GithubAuthApiGithubCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubAuthApiInterface
     */
    githubCallback(requestParameters?: GithubAuthApiGithubCallbackRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

    /**
     * GitHub OAuth 인증을 시작합니다.
     * @summary GitHub 로그인 시작
     * @param {GithubAuthApiGithubLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubAuthApiInterface
     */
    githubLogin(requestParameters?: GithubAuthApiGithubLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

}

/**
 * Request parameters for githubCallback operation in GithubAuthApi.
 * @export
 * @interface GithubAuthApiGithubCallbackRequest
 */
export interface GithubAuthApiGithubCallbackRequest {
    /**
     * 인증 성공 후 리다이렉트할 클라이언트 URL
     * @type {string}
     * @memberof GithubAuthApiGithubCallback
     */
    readonly redirectUrl?: string

    /**
     * GitHub 인증 코드 (자동으로 처리됨)
     * @type {string}
     * @memberof GithubAuthApiGithubCallback
     */
    readonly code?: string
}

/**
 * Request parameters for githubLogin operation in GithubAuthApi.
 * @export
 * @interface GithubAuthApiGithubLoginRequest
 */
export interface GithubAuthApiGithubLoginRequest {
    /**
     * 인증 성공 후 리다이렉트할 클라이언트 URL
     * @type {string}
     * @memberof GithubAuthApiGithubLogin
     */
    readonly redirectUrl?: string
}

/**
 * GithubAuthApi - object-oriented interface
 * @export
 * @class GithubAuthApi
 * @extends {BaseAPI}
 */
export class GithubAuthApi extends BaseAPI implements GithubAuthApiInterface {
    /**
     * GitHub 인증 후 리다이렉트되는 엔드포인트입니다.
     * @summary GitHub 로그인 콜백
     * @param {GithubAuthApiGithubCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubAuthApi
     */
    public githubCallback(requestParameters: GithubAuthApiGithubCallbackRequest = {}, options?: RawAxiosRequestConfig) {
        return GithubAuthApiFp(this.configuration).githubCallback(requestParameters.redirectUrl, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GitHub OAuth 인증을 시작합니다.
     * @summary GitHub 로그인 시작
     * @param {GithubAuthApiGithubLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubAuthApi
     */
    public githubLogin(requestParameters: GithubAuthApiGithubLoginRequest = {}, options?: RawAxiosRequestConfig) {
        return GithubAuthApiFp(this.configuration).githubLogin(requestParameters.redirectUrl, options).then((request) => request(this.axios, this.basePath));
    }
}

