/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EmptyWrapper } from '../types';
/**
 * GoogleAuthApi - axios parameter creator
 * @export
 */
export const GoogleAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Google 인증 후 리다이렉트되는 엔드포인트입니다.
         * @summary Google 로그인 콜백
         * @param {string} [redirectUrl] 인증 성공 후 리다이렉트할 클라이언트 URL
         * @param {string} [code] Google 인증 코드 (자동으로 처리됨)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleCallback: async (redirectUrl?: string, code?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/google/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUrl !== undefined) {
                localVarQueryParameter['redirectUrl'] = redirectUrl;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Google OAuth 인증을 시작합니다.
         * @summary Google 로그인 시작
         * @param {string} [redirectUrl] 인증 성공 후 리다이렉트할 클라이언트 URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin: async (redirectUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUrl !== undefined) {
                localVarQueryParameter['redirectUrl'] = redirectUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoogleAuthApi - functional programming interface
 * @export
 */
export const GoogleAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoogleAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Google 인증 후 리다이렉트되는 엔드포인트입니다.
         * @summary Google 로그인 콜백
         * @param {string} [redirectUrl] 인증 성공 후 리다이렉트할 클라이언트 URL
         * @param {string} [code] Google 인증 코드 (자동으로 처리됨)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleCallback(redirectUrl?: string, code?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleCallback(redirectUrl, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoogleAuthApi.googleCallback']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Google OAuth 인증을 시작합니다.
         * @summary Google 로그인 시작
         * @param {string} [redirectUrl] 인증 성공 후 리다이렉트할 클라이언트 URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleLogin(redirectUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleLogin(redirectUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoogleAuthApi.googleLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GoogleAuthApi - factory interface
 * @export
 */
export const GoogleAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoogleAuthApiFp(configuration)
    return {
        /**
         * Google 인증 후 리다이렉트되는 엔드포인트입니다.
         * @summary Google 로그인 콜백
         * @param {GoogleAuthApiGoogleCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleCallback(requestParameters: GoogleAuthApiGoogleCallbackRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.googleCallback(requestParameters.redirectUrl, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Google OAuth 인증을 시작합니다.
         * @summary Google 로그인 시작
         * @param {GoogleAuthApiGoogleLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin(requestParameters: GoogleAuthApiGoogleLoginRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.googleLogin(requestParameters.redirectUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GoogleAuthApi - interface
 * @export
 * @interface GoogleAuthApi
 */
export interface GoogleAuthApiInterface {
    /**
     * Google 인증 후 리다이렉트되는 엔드포인트입니다.
     * @summary Google 로그인 콜백
     * @param {GoogleAuthApiGoogleCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleAuthApiInterface
     */
    googleCallback(requestParameters?: GoogleAuthApiGoogleCallbackRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

    /**
     * Google OAuth 인증을 시작합니다.
     * @summary Google 로그인 시작
     * @param {GoogleAuthApiGoogleLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleAuthApiInterface
     */
    googleLogin(requestParameters?: GoogleAuthApiGoogleLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

}

/**
 * Request parameters for googleCallback operation in GoogleAuthApi.
 * @export
 * @interface GoogleAuthApiGoogleCallbackRequest
 */
export interface GoogleAuthApiGoogleCallbackRequest {
    /**
     * 인증 성공 후 리다이렉트할 클라이언트 URL
     * @type {string}
     * @memberof GoogleAuthApiGoogleCallback
     */
    readonly redirectUrl?: string

    /**
     * Google 인증 코드 (자동으로 처리됨)
     * @type {string}
     * @memberof GoogleAuthApiGoogleCallback
     */
    readonly code?: string
}

/**
 * Request parameters for googleLogin operation in GoogleAuthApi.
 * @export
 * @interface GoogleAuthApiGoogleLoginRequest
 */
export interface GoogleAuthApiGoogleLoginRequest {
    /**
     * 인증 성공 후 리다이렉트할 클라이언트 URL
     * @type {string}
     * @memberof GoogleAuthApiGoogleLogin
     */
    readonly redirectUrl?: string
}

/**
 * GoogleAuthApi - object-oriented interface
 * @export
 * @class GoogleAuthApi
 * @extends {BaseAPI}
 */
export class GoogleAuthApi extends BaseAPI implements GoogleAuthApiInterface {
    /**
     * Google 인증 후 리다이렉트되는 엔드포인트입니다.
     * @summary Google 로그인 콜백
     * @param {GoogleAuthApiGoogleCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleAuthApi
     */
    public googleCallback(requestParameters: GoogleAuthApiGoogleCallbackRequest = {}, options?: RawAxiosRequestConfig) {
        return GoogleAuthApiFp(this.configuration).googleCallback(requestParameters.redirectUrl, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Google OAuth 인증을 시작합니다.
     * @summary Google 로그인 시작
     * @param {GoogleAuthApiGoogleLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleAuthApi
     */
    public googleLogin(requestParameters: GoogleAuthApiGoogleLoginRequest = {}, options?: RawAxiosRequestConfig) {
        return GoogleAuthApiFp(this.configuration).googleLogin(requestParameters.redirectUrl, options).then((request) => request(this.axios, this.basePath));
    }
}

