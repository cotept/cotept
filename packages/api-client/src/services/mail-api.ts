/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EmptyWrapper } from '../types';
// @ts-ignore
import type { GetAllUsers400Response } from '../types';
// @ts-ignore
import type { GetAllUsers401Response } from '../types';
// @ts-ignore
import type { GetAllUsers403Response } from '../types';
// @ts-ignore
import type { GetAllUsers500Response } from '../types';
// @ts-ignore
import type { MailRequestDto } from '../types';
// @ts-ignore
import type { SendEmailVerification429Response } from '../types';
// @ts-ignore
import type { SendEmailVerification503Response } from '../types';
/**
 * MailApi - axios parameter creator
 * @export
 */
export const MailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 이메일 본인확인
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailVerification: async (mailRequestDto: MailRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailRequestDto' is not null or undefined
            assertParamExists('sendEmailVerification', 'mailRequestDto', mailRequestDto)
            const localVarPath = `/api/v1/mail/email-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인증번호 발송
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMailVerificationCode: async (mailRequestDto: MailRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailRequestDto' is not null or undefined
            assertParamExists('sendMailVerificationCode', 'mailRequestDto', mailRequestDto)
            const localVarPath = `/api/v1/mail/verification-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 비밀번호 찾기
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPasswordRecovery: async (mailRequestDto: MailRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailRequestDto' is not null or undefined
            assertParamExists('sendPasswordRecovery', 'mailRequestDto', mailRequestDto)
            const localVarPath = `/api/v1/mail/password-recovery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멘토링 예약 취소
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationCancel: async (mailRequestDto: MailRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailRequestDto' is not null or undefined
            assertParamExists('sendReservationCancel', 'mailRequestDto', mailRequestDto)
            const localVarPath = `/api/v1/mail/reservation-cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멘토링 예약 변경
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationChange: async (mailRequestDto: MailRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailRequestDto' is not null or undefined
            assertParamExists('sendReservationChange', 'mailRequestDto', mailRequestDto)
            const localVarPath = `/api/v1/mail/reservation-change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멘토링 예약 신청
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationCreate: async (mailRequestDto: MailRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailRequestDto' is not null or undefined
            assertParamExists('sendReservationCreate', 'mailRequestDto', mailRequestDto)
            const localVarPath = `/api/v1/mail/reservation-create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멘토링 예약 확정
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationFix: async (mailRequestDto: MailRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailRequestDto' is not null or undefined
            assertParamExists('sendReservationFix', 'mailRequestDto', mailRequestDto)
            const localVarPath = `/api/v1/mail/reservation-fix`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멘토링 사전안내
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationPrenotice: async (mailRequestDto: MailRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailRequestDto' is not null or undefined
            assertParamExists('sendReservationPrenotice', 'mailRequestDto', mailRequestDto)
            const localVarPath = `/api/v1/mail/reservation-prenotice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailApi - functional programming interface
 * @export
 */
export const MailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 이메일 본인확인
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmailVerification(mailRequestDto: MailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmailVerification(mailRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailApi.sendEmailVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 인증번호 발송
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMailVerificationCode(mailRequestDto: MailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMailVerificationCode(mailRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailApi.sendMailVerificationCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 비밀번호 찾기
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPasswordRecovery(mailRequestDto: MailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPasswordRecovery(mailRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailApi.sendPasswordRecovery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 멘토링 예약 취소
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendReservationCancel(mailRequestDto: MailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendReservationCancel(mailRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailApi.sendReservationCancel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 멘토링 예약 변경
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendReservationChange(mailRequestDto: MailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendReservationChange(mailRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailApi.sendReservationChange']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 멘토링 예약 신청
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendReservationCreate(mailRequestDto: MailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendReservationCreate(mailRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailApi.sendReservationCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 멘토링 예약 확정
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendReservationFix(mailRequestDto: MailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendReservationFix(mailRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailApi.sendReservationFix']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 멘토링 사전안내
         * @param {MailRequestDto} mailRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendReservationPrenotice(mailRequestDto: MailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendReservationPrenotice(mailRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailApi.sendReservationPrenotice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MailApi - factory interface
 * @export
 */
export const MailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailApiFp(configuration)
    return {
        /**
         * 
         * @summary 이메일 본인확인
         * @param {MailApiSendEmailVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailVerification(requestParameters: MailApiSendEmailVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.sendEmailVerification(requestParameters.mailRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인증번호 발송
         * @param {MailApiSendMailVerificationCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMailVerificationCode(requestParameters: MailApiSendMailVerificationCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.sendMailVerificationCode(requestParameters.mailRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 비밀번호 찾기
         * @param {MailApiSendPasswordRecoveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPasswordRecovery(requestParameters: MailApiSendPasswordRecoveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.sendPasswordRecovery(requestParameters.mailRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멘토링 예약 취소
         * @param {MailApiSendReservationCancelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationCancel(requestParameters: MailApiSendReservationCancelRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.sendReservationCancel(requestParameters.mailRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멘토링 예약 변경
         * @param {MailApiSendReservationChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationChange(requestParameters: MailApiSendReservationChangeRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.sendReservationChange(requestParameters.mailRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멘토링 예약 신청
         * @param {MailApiSendReservationCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationCreate(requestParameters: MailApiSendReservationCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.sendReservationCreate(requestParameters.mailRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멘토링 예약 확정
         * @param {MailApiSendReservationFixRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationFix(requestParameters: MailApiSendReservationFixRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.sendReservationFix(requestParameters.mailRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멘토링 사전안내
         * @param {MailApiSendReservationPrenoticeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReservationPrenotice(requestParameters: MailApiSendReservationPrenoticeRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper> {
            return localVarFp.sendReservationPrenotice(requestParameters.mailRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MailApi - interface
 * @export
 * @interface MailApi
 */
export interface MailApiInterface {
    /**
     * 
     * @summary 이메일 본인확인
     * @param {MailApiSendEmailVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    sendEmailVerification(requestParameters: MailApiSendEmailVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

    /**
     * 
     * @summary 인증번호 발송
     * @param {MailApiSendMailVerificationCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    sendMailVerificationCode(requestParameters: MailApiSendMailVerificationCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

    /**
     * 
     * @summary 비밀번호 찾기
     * @param {MailApiSendPasswordRecoveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    sendPasswordRecovery(requestParameters: MailApiSendPasswordRecoveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

    /**
     * 
     * @summary 멘토링 예약 취소
     * @param {MailApiSendReservationCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    sendReservationCancel(requestParameters: MailApiSendReservationCancelRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

    /**
     * 
     * @summary 멘토링 예약 변경
     * @param {MailApiSendReservationChangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    sendReservationChange(requestParameters: MailApiSendReservationChangeRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

    /**
     * 
     * @summary 멘토링 예약 신청
     * @param {MailApiSendReservationCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    sendReservationCreate(requestParameters: MailApiSendReservationCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

    /**
     * 
     * @summary 멘토링 예약 확정
     * @param {MailApiSendReservationFixRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    sendReservationFix(requestParameters: MailApiSendReservationFixRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

    /**
     * 
     * @summary 멘토링 사전안내
     * @param {MailApiSendReservationPrenoticeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    sendReservationPrenotice(requestParameters: MailApiSendReservationPrenoticeRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmptyWrapper>;

}

/**
 * Request parameters for sendEmailVerification operation in MailApi.
 * @export
 * @interface MailApiSendEmailVerificationRequest
 */
export interface MailApiSendEmailVerificationRequest {
    /**
     * 
     * @type {MailRequestDto}
     * @memberof MailApiSendEmailVerification
     */
    readonly mailRequestDto: MailRequestDto
}

/**
 * Request parameters for sendMailVerificationCode operation in MailApi.
 * @export
 * @interface MailApiSendMailVerificationCodeRequest
 */
export interface MailApiSendMailVerificationCodeRequest {
    /**
     * 
     * @type {MailRequestDto}
     * @memberof MailApiSendMailVerificationCode
     */
    readonly mailRequestDto: MailRequestDto
}

/**
 * Request parameters for sendPasswordRecovery operation in MailApi.
 * @export
 * @interface MailApiSendPasswordRecoveryRequest
 */
export interface MailApiSendPasswordRecoveryRequest {
    /**
     * 
     * @type {MailRequestDto}
     * @memberof MailApiSendPasswordRecovery
     */
    readonly mailRequestDto: MailRequestDto
}

/**
 * Request parameters for sendReservationCancel operation in MailApi.
 * @export
 * @interface MailApiSendReservationCancelRequest
 */
export interface MailApiSendReservationCancelRequest {
    /**
     * 
     * @type {MailRequestDto}
     * @memberof MailApiSendReservationCancel
     */
    readonly mailRequestDto: MailRequestDto
}

/**
 * Request parameters for sendReservationChange operation in MailApi.
 * @export
 * @interface MailApiSendReservationChangeRequest
 */
export interface MailApiSendReservationChangeRequest {
    /**
     * 
     * @type {MailRequestDto}
     * @memberof MailApiSendReservationChange
     */
    readonly mailRequestDto: MailRequestDto
}

/**
 * Request parameters for sendReservationCreate operation in MailApi.
 * @export
 * @interface MailApiSendReservationCreateRequest
 */
export interface MailApiSendReservationCreateRequest {
    /**
     * 
     * @type {MailRequestDto}
     * @memberof MailApiSendReservationCreate
     */
    readonly mailRequestDto: MailRequestDto
}

/**
 * Request parameters for sendReservationFix operation in MailApi.
 * @export
 * @interface MailApiSendReservationFixRequest
 */
export interface MailApiSendReservationFixRequest {
    /**
     * 
     * @type {MailRequestDto}
     * @memberof MailApiSendReservationFix
     */
    readonly mailRequestDto: MailRequestDto
}

/**
 * Request parameters for sendReservationPrenotice operation in MailApi.
 * @export
 * @interface MailApiSendReservationPrenoticeRequest
 */
export interface MailApiSendReservationPrenoticeRequest {
    /**
     * 
     * @type {MailRequestDto}
     * @memberof MailApiSendReservationPrenotice
     */
    readonly mailRequestDto: MailRequestDto
}

/**
 * MailApi - object-oriented interface
 * @export
 * @class MailApi
 * @extends {BaseAPI}
 */
export class MailApi extends BaseAPI implements MailApiInterface {
    /**
     * 
     * @summary 이메일 본인확인
     * @param {MailApiSendEmailVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApi
     */
    public sendEmailVerification(requestParameters: MailApiSendEmailVerificationRequest, options?: RawAxiosRequestConfig) {
        return MailApiFp(this.configuration).sendEmailVerification(requestParameters.mailRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인증번호 발송
     * @param {MailApiSendMailVerificationCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApi
     */
    public sendMailVerificationCode(requestParameters: MailApiSendMailVerificationCodeRequest, options?: RawAxiosRequestConfig) {
        return MailApiFp(this.configuration).sendMailVerificationCode(requestParameters.mailRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 비밀번호 찾기
     * @param {MailApiSendPasswordRecoveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApi
     */
    public sendPasswordRecovery(requestParameters: MailApiSendPasswordRecoveryRequest, options?: RawAxiosRequestConfig) {
        return MailApiFp(this.configuration).sendPasswordRecovery(requestParameters.mailRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멘토링 예약 취소
     * @param {MailApiSendReservationCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApi
     */
    public sendReservationCancel(requestParameters: MailApiSendReservationCancelRequest, options?: RawAxiosRequestConfig) {
        return MailApiFp(this.configuration).sendReservationCancel(requestParameters.mailRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멘토링 예약 변경
     * @param {MailApiSendReservationChangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApi
     */
    public sendReservationChange(requestParameters: MailApiSendReservationChangeRequest, options?: RawAxiosRequestConfig) {
        return MailApiFp(this.configuration).sendReservationChange(requestParameters.mailRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멘토링 예약 신청
     * @param {MailApiSendReservationCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApi
     */
    public sendReservationCreate(requestParameters: MailApiSendReservationCreateRequest, options?: RawAxiosRequestConfig) {
        return MailApiFp(this.configuration).sendReservationCreate(requestParameters.mailRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멘토링 예약 확정
     * @param {MailApiSendReservationFixRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApi
     */
    public sendReservationFix(requestParameters: MailApiSendReservationFixRequest, options?: RawAxiosRequestConfig) {
        return MailApiFp(this.configuration).sendReservationFix(requestParameters.mailRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멘토링 사전안내
     * @param {MailApiSendReservationPrenoticeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApi
     */
    public sendReservationPrenotice(requestParameters: MailApiSendReservationPrenoticeRequest, options?: RawAxiosRequestConfig) {
        return MailApiFp(this.configuration).sendReservationPrenotice(requestParameters.mailRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

