/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MailAuditResponseWrapper } from '../types';
/**
 * MailAuditApi - axios parameter creator
 * @export
 */
export const MailAuditApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 메일 감사 조회 (ID)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailAuditById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMailAuditById', 'id', id)
            const localVarPath = `/mail-audit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메일 감사 조회 (검색)
         * @param {string} mailId 
         * @param {string} recipient 
         * @param {string} template 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMailAudit: async (mailId: string, recipient: string, template: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailId' is not null or undefined
            assertParamExists('searchMailAudit', 'mailId', mailId)
            // verify required parameter 'recipient' is not null or undefined
            assertParamExists('searchMailAudit', 'recipient', recipient)
            // verify required parameter 'template' is not null or undefined
            assertParamExists('searchMailAudit', 'template', template)
            const localVarPath = `/mail-audit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mailId !== undefined) {
                localVarQueryParameter['mailId'] = mailId;
            }

            if (recipient !== undefined) {
                localVarQueryParameter['recipient'] = recipient;
            }

            if (template !== undefined) {
                localVarQueryParameter['template'] = template;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailAuditApi - functional programming interface
 * @export
 */
export const MailAuditApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MailAuditApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 메일 감사 조회 (ID)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMailAuditById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailAuditResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMailAuditById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailAuditApi.getMailAuditById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 메일 감사 조회 (검색)
         * @param {string} mailId 
         * @param {string} recipient 
         * @param {string} template 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMailAudit(mailId: string, recipient: string, template: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailAuditResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMailAudit(mailId, recipient, template, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailAuditApi.searchMailAudit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MailAuditApi - factory interface
 * @export
 */
export const MailAuditApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailAuditApiFp(configuration)
    return {
        /**
         * 
         * @summary 메일 감사 조회 (ID)
         * @param {MailAuditApiGetMailAuditByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailAuditById(requestParameters: MailAuditApiGetMailAuditByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<MailAuditResponseWrapper> {
            return localVarFp.getMailAuditById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메일 감사 조회 (검색)
         * @param {MailAuditApiSearchMailAuditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMailAudit(requestParameters: MailAuditApiSearchMailAuditRequest, options?: RawAxiosRequestConfig): AxiosPromise<MailAuditResponseWrapper> {
            return localVarFp.searchMailAudit(requestParameters.mailId, requestParameters.recipient, requestParameters.template, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MailAuditApi - interface
 * @export
 * @interface MailAuditApi
 */
export interface MailAuditApiInterface {
    /**
     * 
     * @summary 메일 감사 조회 (ID)
     * @param {MailAuditApiGetMailAuditByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailAuditApiInterface
     */
    getMailAuditById(requestParameters: MailAuditApiGetMailAuditByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<MailAuditResponseWrapper>;

    /**
     * 
     * @summary 메일 감사 조회 (검색)
     * @param {MailAuditApiSearchMailAuditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailAuditApiInterface
     */
    searchMailAudit(requestParameters: MailAuditApiSearchMailAuditRequest, options?: RawAxiosRequestConfig): AxiosPromise<MailAuditResponseWrapper>;

}

/**
 * Request parameters for getMailAuditById operation in MailAuditApi.
 * @export
 * @interface MailAuditApiGetMailAuditByIdRequest
 */
export interface MailAuditApiGetMailAuditByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof MailAuditApiGetMailAuditById
     */
    readonly id: string
}

/**
 * Request parameters for searchMailAudit operation in MailAuditApi.
 * @export
 * @interface MailAuditApiSearchMailAuditRequest
 */
export interface MailAuditApiSearchMailAuditRequest {
    /**
     * 
     * @type {string}
     * @memberof MailAuditApiSearchMailAudit
     */
    readonly mailId: string

    /**
     * 
     * @type {string}
     * @memberof MailAuditApiSearchMailAudit
     */
    readonly recipient: string

    /**
     * 
     * @type {string}
     * @memberof MailAuditApiSearchMailAudit
     */
    readonly template: string
}

/**
 * MailAuditApi - object-oriented interface
 * @export
 * @class MailAuditApi
 * @extends {BaseAPI}
 */
export class MailAuditApi extends BaseAPI implements MailAuditApiInterface {
    /**
     * 
     * @summary 메일 감사 조회 (ID)
     * @param {MailAuditApiGetMailAuditByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailAuditApi
     */
    public getMailAuditById(requestParameters: MailAuditApiGetMailAuditByIdRequest, options?: RawAxiosRequestConfig) {
        return MailAuditApiFp(this.configuration).getMailAuditById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메일 감사 조회 (검색)
     * @param {MailAuditApiSearchMailAuditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailAuditApi
     */
    public searchMailAudit(requestParameters: MailAuditApiSearchMailAuditRequest, options?: RawAxiosRequestConfig) {
        return MailAuditApiFp(this.configuration).searchMailAudit(requestParameters.mailId, requestParameters.recipient, requestParameters.template, options).then((request) => request(this.axios, this.basePath));
    }
}

