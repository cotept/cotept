/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AnalyzeSkillsDto } from '../types';
// @ts-ignore
import type { BooleanResponse } from '../types';
// @ts-ignore
import type { CheckMentorEligibilityDto } from '../types';
// @ts-ignore
import type { CompleteBaekjoonVerificationDto } from '../types';
// @ts-ignore
import type { CompleteOnboardingDto } from '../types';
// @ts-ignore
import type { CreateBasicProfileDto } from '../types';
// @ts-ignore
import type { CreateMentorProfileDto } from '../types';
// @ts-ignore
import type { GetAllUsers400Response } from '../types';
// @ts-ignore
import type { GetAllUsers401Response } from '../types';
// @ts-ignore
import type { GetAllUsers403Response } from '../types';
// @ts-ignore
import type { GetAllUsers500Response } from '../types';
// @ts-ignore
import type { MentorEligibilityResponse } from '../types';
// @ts-ignore
import type { MentorProfileResponse } from '../types';
// @ts-ignore
import type { MentorTagsResponseWrapper } from '../types';
// @ts-ignore
import type { StartBaekjoonVerification408Response } from '../types';
// @ts-ignore
import type { StartBaekjoonVerification429Response } from '../types';
// @ts-ignore
import type { StartBaekjoonVerification503Response } from '../types';
// @ts-ignore
import type { StartBaekjoonVerificationDto } from '../types';
// @ts-ignore
import type { TagStatisticsOutputResponse } from '../types';
// @ts-ignore
import type { UserProfileResponse } from '../types';
// @ts-ignore
import type { VerificationResultResponseWrapper } from '../types';
// @ts-ignore
import type { VerificationStatusResponseWrapper } from '../types';
/**
 * OnboardingApi - axios parameter creator
 * @export
 */
export const OnboardingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 온보딩 - 실력 분석 실행
         * @param {AnalyzeSkillsDto} analyzeSkillsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeSkills: async (analyzeSkillsDto: AnalyzeSkillsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analyzeSkillsDto' is not null or undefined
            assertParamExists('analyzeSkills', 'analyzeSkillsDto', analyzeSkillsDto)
            const localVarPath = `/api/v1/onboarding/analyze`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(analyzeSkillsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 온보딩 - 멘토 자격 요건 확인
         * @param {CheckMentorEligibilityDto} checkMentorEligibilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkMentorEligibility: async (checkMentorEligibilityDto: CheckMentorEligibilityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkMentorEligibilityDto' is not null or undefined
            assertParamExists('checkMentorEligibility', 'checkMentorEligibilityDto', checkMentorEligibilityDto)
            const localVarPath = `/api/v1/onboarding/mentor/eligibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkMentorEligibilityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 온보딩 - 백준 인증 완료
         * @param {CompleteBaekjoonVerificationDto} completeBaekjoonVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeBaekjoonVerification: async (completeBaekjoonVerificationDto: CompleteBaekjoonVerificationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeBaekjoonVerificationDto' is not null or undefined
            assertParamExists('completeBaekjoonVerification', 'completeBaekjoonVerificationDto', completeBaekjoonVerificationDto)
            const localVarPath = `/api/v1/onboarding/baekjoon/verify/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeBaekjoonVerificationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 온보딩 - 온보딩 완료
         * @param {CompleteOnboardingDto} completeOnboardingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeOnboarding: async (completeOnboardingDto: CompleteOnboardingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeOnboardingDto' is not null or undefined
            assertParamExists('completeOnboarding', 'completeOnboardingDto', completeOnboardingDto)
            const localVarPath = `/api/v1/onboarding/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeOnboardingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 온보딩 - 기본 프로필 생성
         * @param {CreateBasicProfileDto} createBasicProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasicProfile: async (createBasicProfileDto: CreateBasicProfileDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBasicProfileDto' is not null or undefined
            assertParamExists('createBasicProfile', 'createBasicProfileDto', createBasicProfileDto)
            const localVarPath = `/api/v1/onboarding/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBasicProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 온보딩 - 멘토 프로필 생성/업데이트
         * @param {CreateMentorProfileDto} createMentorProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMentorProfileOnboarding: async (createMentorProfileDto: CreateMentorProfileDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMentorProfileDto' is not null or undefined
            assertParamExists('createMentorProfileOnboarding', 'createMentorProfileDto', createMentorProfileDto)
            const localVarPath = `/api/v1/onboarding/mentor-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMentorProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 온보딩 - 멘토 프로필 태그 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentorTags: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/onboarding/mentor/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 온보딩 - 백준 인증 시작
         * @param {StartBaekjoonVerificationDto} startBaekjoonVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startBaekjoonVerification: async (startBaekjoonVerificationDto: StartBaekjoonVerificationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startBaekjoonVerificationDto' is not null or undefined
            assertParamExists('startBaekjoonVerification', 'startBaekjoonVerificationDto', startBaekjoonVerificationDto)
            const localVarPath = `/api/v1/onboarding/baekjoon/verify/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startBaekjoonVerificationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingApi - functional programming interface
 * @export
 */
export const OnboardingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 온보딩 - 실력 분석 실행
         * @param {AnalyzeSkillsDto} analyzeSkillsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyzeSkills(analyzeSkillsDto: AnalyzeSkillsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagStatisticsOutputResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyzeSkills(analyzeSkillsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnboardingApi.analyzeSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 온보딩 - 멘토 자격 요건 확인
         * @param {CheckMentorEligibilityDto} checkMentorEligibilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkMentorEligibility(checkMentorEligibilityDto: CheckMentorEligibilityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MentorEligibilityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkMentorEligibility(checkMentorEligibilityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnboardingApi.checkMentorEligibility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 온보딩 - 백준 인증 완료
         * @param {CompleteBaekjoonVerificationDto} completeBaekjoonVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeBaekjoonVerification(completeBaekjoonVerificationDto: CompleteBaekjoonVerificationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResultResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeBaekjoonVerification(completeBaekjoonVerificationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnboardingApi.completeBaekjoonVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 온보딩 - 온보딩 완료
         * @param {CompleteOnboardingDto} completeOnboardingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeOnboarding(completeOnboardingDto: CompleteOnboardingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeOnboarding(completeOnboardingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnboardingApi.completeOnboarding']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 온보딩 - 기본 프로필 생성
         * @param {CreateBasicProfileDto} createBasicProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBasicProfile(createBasicProfileDto: CreateBasicProfileDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBasicProfile(createBasicProfileDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnboardingApi.createBasicProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 온보딩 - 멘토 프로필 생성/업데이트
         * @param {CreateMentorProfileDto} createMentorProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMentorProfileOnboarding(createMentorProfileDto: CreateMentorProfileDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MentorProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMentorProfileOnboarding(createMentorProfileDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnboardingApi.createMentorProfileOnboarding']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 온보딩 - 멘토 프로필 태그 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMentorTags(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MentorTagsResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMentorTags(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnboardingApi.getMentorTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 온보딩 - 백준 인증 시작
         * @param {StartBaekjoonVerificationDto} startBaekjoonVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startBaekjoonVerification(startBaekjoonVerificationDto: StartBaekjoonVerificationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationStatusResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startBaekjoonVerification(startBaekjoonVerificationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnboardingApi.startBaekjoonVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OnboardingApi - factory interface
 * @export
 */
export const OnboardingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingApiFp(configuration)
    return {
        /**
         * 
         * @summary 온보딩 - 실력 분석 실행
         * @param {OnboardingApiAnalyzeSkillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeSkills(requestParameters: OnboardingApiAnalyzeSkillsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TagStatisticsOutputResponse> {
            return localVarFp.analyzeSkills(requestParameters.analyzeSkillsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 온보딩 - 멘토 자격 요건 확인
         * @param {OnboardingApiCheckMentorEligibilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkMentorEligibility(requestParameters: OnboardingApiCheckMentorEligibilityRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorEligibilityResponse> {
            return localVarFp.checkMentorEligibility(requestParameters.checkMentorEligibilityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 온보딩 - 백준 인증 완료
         * @param {OnboardingApiCompleteBaekjoonVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeBaekjoonVerification(requestParameters: OnboardingApiCompleteBaekjoonVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationResultResponseWrapper> {
            return localVarFp.completeBaekjoonVerification(requestParameters.completeBaekjoonVerificationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 온보딩 - 온보딩 완료
         * @param {OnboardingApiCompleteOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeOnboarding(requestParameters: OnboardingApiCompleteOnboardingRequest, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.completeOnboarding(requestParameters.completeOnboardingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 온보딩 - 기본 프로필 생성
         * @param {OnboardingApiCreateBasicProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasicProfile(requestParameters: OnboardingApiCreateBasicProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse> {
            return localVarFp.createBasicProfile(requestParameters.createBasicProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 온보딩 - 멘토 프로필 생성/업데이트
         * @param {OnboardingApiCreateMentorProfileOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMentorProfileOnboarding(requestParameters: OnboardingApiCreateMentorProfileOnboardingRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorProfileResponse> {
            return localVarFp.createMentorProfileOnboarding(requestParameters.createMentorProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 온보딩 - 멘토 프로필 태그 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentorTags(options?: RawAxiosRequestConfig): AxiosPromise<MentorTagsResponseWrapper> {
            return localVarFp.getMentorTags(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 온보딩 - 백준 인증 시작
         * @param {OnboardingApiStartBaekjoonVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startBaekjoonVerification(requestParameters: OnboardingApiStartBaekjoonVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationStatusResponseWrapper> {
            return localVarFp.startBaekjoonVerification(requestParameters.startBaekjoonVerificationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnboardingApi - interface
 * @export
 * @interface OnboardingApi
 */
export interface OnboardingApiInterface {
    /**
     * 
     * @summary 온보딩 - 실력 분석 실행
     * @param {OnboardingApiAnalyzeSkillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiInterface
     */
    analyzeSkills(requestParameters: OnboardingApiAnalyzeSkillsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TagStatisticsOutputResponse>;

    /**
     * 
     * @summary 온보딩 - 멘토 자격 요건 확인
     * @param {OnboardingApiCheckMentorEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiInterface
     */
    checkMentorEligibility(requestParameters: OnboardingApiCheckMentorEligibilityRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorEligibilityResponse>;

    /**
     * 
     * @summary 온보딩 - 백준 인증 완료
     * @param {OnboardingApiCompleteBaekjoonVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiInterface
     */
    completeBaekjoonVerification(requestParameters: OnboardingApiCompleteBaekjoonVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationResultResponseWrapper>;

    /**
     * 
     * @summary 온보딩 - 온보딩 완료
     * @param {OnboardingApiCompleteOnboardingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiInterface
     */
    completeOnboarding(requestParameters: OnboardingApiCompleteOnboardingRequest, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse>;

    /**
     * 
     * @summary 온보딩 - 기본 프로필 생성
     * @param {OnboardingApiCreateBasicProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiInterface
     */
    createBasicProfile(requestParameters: OnboardingApiCreateBasicProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse>;

    /**
     * 
     * @summary 온보딩 - 멘토 프로필 생성/업데이트
     * @param {OnboardingApiCreateMentorProfileOnboardingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiInterface
     */
    createMentorProfileOnboarding(requestParameters: OnboardingApiCreateMentorProfileOnboardingRequest, options?: RawAxiosRequestConfig): AxiosPromise<MentorProfileResponse>;

    /**
     * 
     * @summary 온보딩 - 멘토 프로필 태그 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiInterface
     */
    getMentorTags(options?: RawAxiosRequestConfig): AxiosPromise<MentorTagsResponseWrapper>;

    /**
     * 
     * @summary 온보딩 - 백준 인증 시작
     * @param {OnboardingApiStartBaekjoonVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiInterface
     */
    startBaekjoonVerification(requestParameters: OnboardingApiStartBaekjoonVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationStatusResponseWrapper>;

}

/**
 * Request parameters for analyzeSkills operation in OnboardingApi.
 * @export
 * @interface OnboardingApiAnalyzeSkillsRequest
 */
export interface OnboardingApiAnalyzeSkillsRequest {
    /**
     * 
     * @type {AnalyzeSkillsDto}
     * @memberof OnboardingApiAnalyzeSkills
     */
    readonly analyzeSkillsDto: AnalyzeSkillsDto
}

/**
 * Request parameters for checkMentorEligibility operation in OnboardingApi.
 * @export
 * @interface OnboardingApiCheckMentorEligibilityRequest
 */
export interface OnboardingApiCheckMentorEligibilityRequest {
    /**
     * 
     * @type {CheckMentorEligibilityDto}
     * @memberof OnboardingApiCheckMentorEligibility
     */
    readonly checkMentorEligibilityDto: CheckMentorEligibilityDto
}

/**
 * Request parameters for completeBaekjoonVerification operation in OnboardingApi.
 * @export
 * @interface OnboardingApiCompleteBaekjoonVerificationRequest
 */
export interface OnboardingApiCompleteBaekjoonVerificationRequest {
    /**
     * 
     * @type {CompleteBaekjoonVerificationDto}
     * @memberof OnboardingApiCompleteBaekjoonVerification
     */
    readonly completeBaekjoonVerificationDto: CompleteBaekjoonVerificationDto
}

/**
 * Request parameters for completeOnboarding operation in OnboardingApi.
 * @export
 * @interface OnboardingApiCompleteOnboardingRequest
 */
export interface OnboardingApiCompleteOnboardingRequest {
    /**
     * 
     * @type {CompleteOnboardingDto}
     * @memberof OnboardingApiCompleteOnboarding
     */
    readonly completeOnboardingDto: CompleteOnboardingDto
}

/**
 * Request parameters for createBasicProfile operation in OnboardingApi.
 * @export
 * @interface OnboardingApiCreateBasicProfileRequest
 */
export interface OnboardingApiCreateBasicProfileRequest {
    /**
     * 
     * @type {CreateBasicProfileDto}
     * @memberof OnboardingApiCreateBasicProfile
     */
    readonly createBasicProfileDto: CreateBasicProfileDto
}

/**
 * Request parameters for createMentorProfileOnboarding operation in OnboardingApi.
 * @export
 * @interface OnboardingApiCreateMentorProfileOnboardingRequest
 */
export interface OnboardingApiCreateMentorProfileOnboardingRequest {
    /**
     * 
     * @type {CreateMentorProfileDto}
     * @memberof OnboardingApiCreateMentorProfileOnboarding
     */
    readonly createMentorProfileDto: CreateMentorProfileDto
}

/**
 * Request parameters for startBaekjoonVerification operation in OnboardingApi.
 * @export
 * @interface OnboardingApiStartBaekjoonVerificationRequest
 */
export interface OnboardingApiStartBaekjoonVerificationRequest {
    /**
     * 
     * @type {StartBaekjoonVerificationDto}
     * @memberof OnboardingApiStartBaekjoonVerification
     */
    readonly startBaekjoonVerificationDto: StartBaekjoonVerificationDto
}

/**
 * OnboardingApi - object-oriented interface
 * @export
 * @class OnboardingApi
 * @extends {BaseAPI}
 */
export class OnboardingApi extends BaseAPI implements OnboardingApiInterface {
    /**
     * 
     * @summary 온보딩 - 실력 분석 실행
     * @param {OnboardingApiAnalyzeSkillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public analyzeSkills(requestParameters: OnboardingApiAnalyzeSkillsRequest, options?: RawAxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).analyzeSkills(requestParameters.analyzeSkillsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 온보딩 - 멘토 자격 요건 확인
     * @param {OnboardingApiCheckMentorEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public checkMentorEligibility(requestParameters: OnboardingApiCheckMentorEligibilityRequest, options?: RawAxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).checkMentorEligibility(requestParameters.checkMentorEligibilityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 온보딩 - 백준 인증 완료
     * @param {OnboardingApiCompleteBaekjoonVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public completeBaekjoonVerification(requestParameters: OnboardingApiCompleteBaekjoonVerificationRequest, options?: RawAxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).completeBaekjoonVerification(requestParameters.completeBaekjoonVerificationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 온보딩 - 온보딩 완료
     * @param {OnboardingApiCompleteOnboardingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public completeOnboarding(requestParameters: OnboardingApiCompleteOnboardingRequest, options?: RawAxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).completeOnboarding(requestParameters.completeOnboardingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 온보딩 - 기본 프로필 생성
     * @param {OnboardingApiCreateBasicProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public createBasicProfile(requestParameters: OnboardingApiCreateBasicProfileRequest, options?: RawAxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).createBasicProfile(requestParameters.createBasicProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 온보딩 - 멘토 프로필 생성/업데이트
     * @param {OnboardingApiCreateMentorProfileOnboardingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public createMentorProfileOnboarding(requestParameters: OnboardingApiCreateMentorProfileOnboardingRequest, options?: RawAxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).createMentorProfileOnboarding(requestParameters.createMentorProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 온보딩 - 멘토 프로필 태그 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public getMentorTags(options?: RawAxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).getMentorTags(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 온보딩 - 백준 인증 시작
     * @param {OnboardingApiStartBaekjoonVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public startBaekjoonVerification(requestParameters: OnboardingApiStartBaekjoonVerificationRequest, options?: RawAxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).startBaekjoonVerification(requestParameters.startBaekjoonVerificationDto, options).then((request) => request(this.axios, this.basePath));
    }
}

