/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GenerateUploadUrlRequestDto } from '../types';
// @ts-ignore
import type { GenerateUploadUrlResponseWrapper } from '../types';
/**
 * StorageApi - axios parameter creator
 * @export
 */
export const StorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 클라이언트가 OCI Object Storage에 직접 파일을 업로드할 수 있는 임시 URL을 발급합니다.
         * @summary 파일 업로드를 위한 Pre-signed URL 생성
         * @param {GenerateUploadUrlRequestDto} generateUploadUrlRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUploadUrl: async (generateUploadUrlRequestDto: GenerateUploadUrlRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generateUploadUrlRequestDto' is not null or undefined
            assertParamExists('generateUploadUrl', 'generateUploadUrlRequestDto', generateUploadUrlRequestDto)
            const localVarPath = `/api/v1/storage/upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateUploadUrlRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageApi - functional programming interface
 * @export
 */
export const StorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StorageApiAxiosParamCreator(configuration)
    return {
        /**
         * 클라이언트가 OCI Object Storage에 직접 파일을 업로드할 수 있는 임시 URL을 발급합니다.
         * @summary 파일 업로드를 위한 Pre-signed URL 생성
         * @param {GenerateUploadUrlRequestDto} generateUploadUrlRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateUploadUrl(generateUploadUrlRequestDto: GenerateUploadUrlRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateUploadUrlResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateUploadUrl(generateUploadUrlRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StorageApi.generateUploadUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StorageApi - factory interface
 * @export
 */
export const StorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StorageApiFp(configuration)
    return {
        /**
         * 클라이언트가 OCI Object Storage에 직접 파일을 업로드할 수 있는 임시 URL을 발급합니다.
         * @summary 파일 업로드를 위한 Pre-signed URL 생성
         * @param {StorageApiGenerateUploadUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUploadUrl(requestParameters: StorageApiGenerateUploadUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateUploadUrlResponseWrapper> {
            return localVarFp.generateUploadUrl(requestParameters.generateUploadUrlRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StorageApi - interface
 * @export
 * @interface StorageApi
 */
export interface StorageApiInterface {
    /**
     * 클라이언트가 OCI Object Storage에 직접 파일을 업로드할 수 있는 임시 URL을 발급합니다.
     * @summary 파일 업로드를 위한 Pre-signed URL 생성
     * @param {StorageApiGenerateUploadUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    generateUploadUrl(requestParameters: StorageApiGenerateUploadUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateUploadUrlResponseWrapper>;

}

/**
 * Request parameters for generateUploadUrl operation in StorageApi.
 * @export
 * @interface StorageApiGenerateUploadUrlRequest
 */
export interface StorageApiGenerateUploadUrlRequest {
    /**
     * 
     * @type {GenerateUploadUrlRequestDto}
     * @memberof StorageApiGenerateUploadUrl
     */
    readonly generateUploadUrlRequestDto: GenerateUploadUrlRequestDto
}

/**
 * StorageApi - object-oriented interface
 * @export
 * @class StorageApi
 * @extends {BaseAPI}
 */
export class StorageApi extends BaseAPI implements StorageApiInterface {
    /**
     * 클라이언트가 OCI Object Storage에 직접 파일을 업로드할 수 있는 임시 URL을 발급합니다.
     * @summary 파일 업로드를 위한 Pre-signed URL 생성
     * @param {StorageApiGenerateUploadUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public generateUploadUrl(requestParameters: StorageApiGenerateUploadUrlRequest, options?: RawAxiosRequestConfig) {
        return StorageApiFp(this.configuration).generateUploadUrl(requestParameters.generateUploadUrlRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

