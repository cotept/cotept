/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ChangePasswordRequestDto } from '../types';
// @ts-ignore
import type { CreateUserRequestDto } from '../types';
// @ts-ignore
import type { DeleteUserRequestDto } from '../types';
// @ts-ignore
import type { GetAllUsers400Response } from '../types';
// @ts-ignore
import type { GetAllUsers401Response } from '../types';
// @ts-ignore
import type { GetAllUsers403Response } from '../types';
// @ts-ignore
import type { GetAllUsers500Response } from '../types';
// @ts-ignore
import type { PasswordChangeResponseWrapper } from '../types';
// @ts-ignore
import type { UpdateUser404Response } from '../types';
// @ts-ignore
import type { UpdateUser409Response } from '../types';
// @ts-ignore
import type { UpdateUser422Response } from '../types';
// @ts-ignore
import type { UpdateUserRequestDto } from '../types';
// @ts-ignore
import type { UserDeletionResponseWrapper } from '../types';
// @ts-ignore
import type { UserListResponseWrapper } from '../types';
// @ts-ignore
import type { UserResponseDto } from '../types';
// @ts-ignore
import type { UserResponseWrapper } from '../types';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 사용자 비밀번호를 변경합니다.
         * @summary 비밀번호 변경
         * @param {string} id 사용자 ID
         * @param {ChangePasswordRequestDto} changePasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (id: string, changePasswordRequestDto: ChangePasswordRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('changePassword', 'id', id)
            // verify required parameter 'changePasswordRequestDto' is not null or undefined
            assertParamExists('changePassword', 'changePasswordRequestDto', changePasswordRequestDto)
            const localVarPath = `/users/{id}/password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 새로운 사용자를 생성합니다.
         * @summary 사용자 생성
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserRequestDto: CreateUserRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequestDto' is not null or undefined
            assertParamExists('createUser', 'createUserRequestDto', createUserRequestDto)
            const localVarPath = `/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자를 삭제합니다.
         * @summary 사용자 삭제
         * @param {string} id 사용자 ID
         * @param {DeleteUserRequestDto} deleteUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: string, deleteUserRequestDto: DeleteUserRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            // verify required parameter 'deleteUserRequestDto' is not null or undefined
            assertParamExists('deleteUser', 'deleteUserRequestDto', deleteUserRequestDto)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 등록된 모든 사용자 목록을 조회합니다.
         * @summary 사용자 목록 조회
         * @param {number} [page] 페이지 번호 (기본값: 1)
         * @param {number} [limit] 페이지당 항목 수 (기본값: 10)
         * @param {GetAllUsersRole} [role] 역할 필터
         * @param {GetAllUsersStatus} [status] 상태 필터
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (page?: number, limit?: number, role?: GetAllUsersRole, status?: GetAllUsersStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/userlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ID로 사용자 정보를 조회합니다.
         * @summary 사용자 상세 조회
         * @param {string} id 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 정보를 수정합니다.
         * @summary 사용자 정보 수정
         * @param {string} id 사용자 ID
         * @param {UpdateUserRequestDto} updateUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: string, updateUserRequestDto: UpdateUserRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'updateUserRequestDto' is not null or undefined
            assertParamExists('updateUser', 'updateUserRequestDto', updateUserRequestDto)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 사용자 비밀번호를 변경합니다.
         * @summary 비밀번호 변경
         * @param {string} id 사용자 ID
         * @param {ChangePasswordRequestDto} changePasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(id: string, changePasswordRequestDto: ChangePasswordRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordChangeResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(id, changePasswordRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 새로운 사용자를 생성합니다.
         * @summary 사용자 생성
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserRequestDto: CreateUserRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자를 삭제합니다.
         * @summary 사용자 삭제
         * @param {string} id 사용자 ID
         * @param {DeleteUserRequestDto} deleteUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: string, deleteUserRequestDto: DeleteUserRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDeletionResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, deleteUserRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 등록된 모든 사용자 목록을 조회합니다.
         * @summary 사용자 목록 조회
         * @param {number} [page] 페이지 번호 (기본값: 1)
         * @param {number} [limit] 페이지당 항목 수 (기본값: 10)
         * @param {GetAllUsersRole} [role] 역할 필터
         * @param {GetAllUsersStatus} [status] 상태 필터
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(page?: number, limit?: number, role?: GetAllUsersRole, status?: GetAllUsersStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserListResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(page, limit, role, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ID로 사용자 정보를 조회합니다.
         * @summary 사용자 상세 조회
         * @param {string} id 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 정보를 수정합니다.
         * @summary 사용자 정보 수정
         * @param {string} id 사용자 ID
         * @param {UpdateUserRequestDto} updateUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: string, updateUserRequestDto: UpdateUserRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, updateUserRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 사용자 비밀번호를 변경합니다.
         * @summary 비밀번호 변경
         * @param {UserApiChangePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(requestParameters: UserApiChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<PasswordChangeResponseWrapper> {
            return localVarFp.changePassword(requestParameters.id, requestParameters.changePasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 새로운 사용자를 생성합니다.
         * @summary 사용자 생성
         * @param {UserApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: UserApiCreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseWrapper> {
            return localVarFp.createUser(requestParameters.createUserRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자를 삭제합니다.
         * @summary 사용자 삭제
         * @param {UserApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: UserApiDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDeletionResponseWrapper> {
            return localVarFp.deleteUser(requestParameters.id, requestParameters.deleteUserRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 등록된 모든 사용자 목록을 조회합니다.
         * @summary 사용자 목록 조회
         * @param {UserApiGetAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(requestParameters: UserApiGetAllUsersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UserListResponseWrapper> {
            return localVarFp.getAllUsers(requestParameters.page, requestParameters.limit, requestParameters.role, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * ID로 사용자 정보를 조회합니다.
         * @summary 사용자 상세 조회
         * @param {UserApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(requestParameters: UserApiGetUserByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseWrapper> {
            return localVarFp.getUserById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 정보를 수정합니다.
         * @summary 사용자 정보 수정
         * @param {UserApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UserApiUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseWrapper> {
            return localVarFp.updateUser(requestParameters.id, requestParameters.updateUserRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * 사용자 비밀번호를 변경합니다.
     * @summary 비밀번호 변경
     * @param {UserApiChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    changePassword(requestParameters: UserApiChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<PasswordChangeResponseWrapper>;

    /**
     * 새로운 사용자를 생성합니다.
     * @summary 사용자 생성
     * @param {UserApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createUser(requestParameters: UserApiCreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseWrapper>;

    /**
     * 사용자를 삭제합니다.
     * @summary 사용자 삭제
     * @param {UserApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    deleteUser(requestParameters: UserApiDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDeletionResponseWrapper>;

    /**
     * 등록된 모든 사용자 목록을 조회합니다.
     * @summary 사용자 목록 조회
     * @param {UserApiGetAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getAllUsers(requestParameters?: UserApiGetAllUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserListResponseWrapper>;

    /**
     * ID로 사용자 정보를 조회합니다.
     * @summary 사용자 상세 조회
     * @param {UserApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserById(requestParameters: UserApiGetUserByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseWrapper>;

    /**
     * 사용자 정보를 수정합니다.
     * @summary 사용자 정보 수정
     * @param {UserApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateUser(requestParameters: UserApiUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseWrapper>;

}

/**
 * Request parameters for changePassword operation in UserApi.
 * @export
 * @interface UserApiChangePasswordRequest
 */
export interface UserApiChangePasswordRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserApiChangePassword
     */
    readonly id: string

    /**
     * 
     * @type {ChangePasswordRequestDto}
     * @memberof UserApiChangePassword
     */
    readonly changePasswordRequestDto: ChangePasswordRequestDto
}

/**
 * Request parameters for createUser operation in UserApi.
 * @export
 * @interface UserApiCreateUserRequest
 */
export interface UserApiCreateUserRequest {
    /**
     * 
     * @type {CreateUserRequestDto}
     * @memberof UserApiCreateUser
     */
    readonly createUserRequestDto: CreateUserRequestDto
}

/**
 * Request parameters for deleteUser operation in UserApi.
 * @export
 * @interface UserApiDeleteUserRequest
 */
export interface UserApiDeleteUserRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserApiDeleteUser
     */
    readonly id: string

    /**
     * 
     * @type {DeleteUserRequestDto}
     * @memberof UserApiDeleteUser
     */
    readonly deleteUserRequestDto: DeleteUserRequestDto
}

/**
 * Request parameters for getAllUsers operation in UserApi.
 * @export
 * @interface UserApiGetAllUsersRequest
 */
export interface UserApiGetAllUsersRequest {
    /**
     * 페이지 번호 (기본값: 1)
     * @type {number}
     * @memberof UserApiGetAllUsers
     */
    readonly page?: number

    /**
     * 페이지당 항목 수 (기본값: 10)
     * @type {number}
     * @memberof UserApiGetAllUsers
     */
    readonly limit?: number

    /**
     * 역할 필터
     * @type {'MENTEE' | 'MENTOR' | 'ADMIN'}
     * @memberof UserApiGetAllUsers
     */
    readonly role?: GetAllUsersRole

    /**
     * 상태 필터
     * @type {'ACTIVE' | 'INACTIVE' | 'SUSPENDED'}
     * @memberof UserApiGetAllUsers
     */
    readonly status?: GetAllUsersStatus
}

/**
 * Request parameters for getUserById operation in UserApi.
 * @export
 * @interface UserApiGetUserByIdRequest
 */
export interface UserApiGetUserByIdRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserApiGetUserById
     */
    readonly id: string
}

/**
 * Request parameters for updateUser operation in UserApi.
 * @export
 * @interface UserApiUpdateUserRequest
 */
export interface UserApiUpdateUserRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserApiUpdateUser
     */
    readonly id: string

    /**
     * 
     * @type {UpdateUserRequestDto}
     * @memberof UserApiUpdateUser
     */
    readonly updateUserRequestDto: UpdateUserRequestDto
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * 사용자 비밀번호를 변경합니다.
     * @summary 비밀번호 변경
     * @param {UserApiChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public changePassword(requestParameters: UserApiChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).changePassword(requestParameters.id, requestParameters.changePasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 새로운 사용자를 생성합니다.
     * @summary 사용자 생성
     * @param {UserApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(requestParameters: UserApiCreateUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createUser(requestParameters.createUserRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자를 삭제합니다.
     * @summary 사용자 삭제
     * @param {UserApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(requestParameters: UserApiDeleteUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUser(requestParameters.id, requestParameters.deleteUserRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 등록된 모든 사용자 목록을 조회합니다.
     * @summary 사용자 목록 조회
     * @param {UserApiGetAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAllUsers(requestParameters: UserApiGetAllUsersRequest = {}, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getAllUsers(requestParameters.page, requestParameters.limit, requestParameters.role, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ID로 사용자 정보를 조회합니다.
     * @summary 사용자 상세 조회
     * @param {UserApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserById(requestParameters: UserApiGetUserByIdRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 정보를 수정합니다.
     * @summary 사용자 정보 수정
     * @param {UserApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(requestParameters: UserApiUpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUser(requestParameters.id, requestParameters.updateUserRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum GetAllUsersRole {
    mentee = 'MENTEE',
    mentor = 'MENTOR',
    admin = 'ADMIN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetAllUsersStatus {
    active = 'ACTIVE',
    inactive = 'INACTIVE',
    suspended = 'SUSPENDED'
}
