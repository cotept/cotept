/* tslint:disable */
/* eslint-disable */
/**
 * CotePT API
 * 코딩 테스트 멘토링 플랫폼 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BasicProfileCreationResponseWrapper } from '../types';
// @ts-ignore
import type { CreateUserProfileRequestDto } from '../types';
// @ts-ignore
import type { GetAllUsers400Response } from '../types';
// @ts-ignore
import type { GetAllUsers401Response } from '../types';
// @ts-ignore
import type { GetAllUsers403Response } from '../types';
// @ts-ignore
import type { GetAllUsers500Response } from '../types';
// @ts-ignore
import type { MyProfileResponseWrapper } from '../types';
// @ts-ignore
import type { UpdateUserProfileRequestDto } from '../types';
// @ts-ignore
import type { UserProfileCompletenessResponseWrapper } from '../types';
// @ts-ignore
import type { UserProfileCreationResponseWrapper } from '../types';
// @ts-ignore
import type { UserProfileDeletionResponseWrapper } from '../types';
// @ts-ignore
import type { UserProfileResponse } from '../types';
// @ts-ignore
import type { UserProfileUpdateResponseWrapper } from '../types';
// @ts-ignore
import type { UserProfileUpsertResponseWrapper } from '../types';
/**
 * UserProfileApi - axios parameter creator
 * @export
 */
export const UserProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 사용자 프로필의 완성도를 확인하고 누락된 필드를 반환합니다.
         * @summary 프로필 완성도 확인
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProfileCompleteness: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('checkProfileCompleteness', 'userId', userId)
            const localVarPath = `/api/v1/user-profiles/{userId}/completeness`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 회원가입 시 최소한의 정보로 기본 프로필을 생성하고 완성도 가이드를 제공합니다.
         * @summary 회원가입 시 기본 프로필 생성
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasicProfileForSignup: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createBasicProfileForSignup', 'userId', userId)
            const localVarPath = `/api/v1/user-profiles/signup/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 새로운 사용자 프로필을 생성합니다.
         * @summary 사용자 프로필 생성
         * @param {CreateUserProfileRequestDto} createUserProfileRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserProfile: async (createUserProfileRequestDto: CreateUserProfileRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserProfileRequestDto' is not null or undefined
            assertParamExists('createUserProfile', 'createUserProfileRequestDto', createUserProfileRequestDto)
            const localVarPath = `/api/v1/user-profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserProfileRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 프로필을 삭제합니다.
         * @summary 사용자 프로필 삭제
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserProfile: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserProfile', 'userId', userId)
            const localVarPath = `/api/v1/user-profiles/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인한 사용자의 멘티 프로필과 멘토 프로필 보유 여부를 조회합니다.
         * @summary 내 프로필 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user-profiles/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 ID로 프로필 정보를 조회합니다.
         * @summary 사용자 프로필 조회
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserProfile', 'userId', userId)
            const localVarPath = `/api/v1/user-profiles/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 고유 ID로 프로필 정보를 조회합니다.
         * @summary 프로필 ID로 조회
         * @param {number} idx 프로필 고유 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfileByIdx: async (idx: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idx' is not null or undefined
            assertParamExists('getUserProfileByIdx', 'idx', idx)
            const localVarPath = `/api/v1/user-profiles/idx/{idx}`
                .replace(`{${"idx"}}`, encodeURIComponent(String(idx)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 프로필 정보를 수정합니다.
         * @summary 사용자 프로필 수정
         * @param {string} userId 사용자 ID
         * @param {UpdateUserProfileRequestDto} updateUserProfileRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile: async (userId: string, updateUserProfileRequestDto: UpdateUserProfileRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserProfile', 'userId', userId)
            // verify required parameter 'updateUserProfileRequestDto' is not null or undefined
            assertParamExists('updateUserProfile', 'updateUserProfileRequestDto', updateUserProfileRequestDto)
            const localVarPath = `/api/v1/user-profiles/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserProfileRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필이 존재하면 수정하고, 존재하지 않으면 생성합니다.
         * @summary 프로필 생성 또는 수정
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertUserProfile: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('upsertUserProfile', 'userId', userId)
            const localVarPath = `/api/v1/user-profiles/{userId}/upsert`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserProfileApi - functional programming interface
 * @export
 */
export const UserProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 사용자 프로필의 완성도를 확인하고 누락된 필드를 반환합니다.
         * @summary 프로필 완성도 확인
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkProfileCompleteness(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileCompletenessResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkProfileCompleteness(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProfileApi.checkProfileCompleteness']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 회원가입 시 최소한의 정보로 기본 프로필을 생성하고 완성도 가이드를 제공합니다.
         * @summary 회원가입 시 기본 프로필 생성
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBasicProfileForSignup(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasicProfileCreationResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBasicProfileForSignup(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProfileApi.createBasicProfileForSignup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 새로운 사용자 프로필을 생성합니다.
         * @summary 사용자 프로필 생성
         * @param {CreateUserProfileRequestDto} createUserProfileRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserProfile(createUserProfileRequestDto: CreateUserProfileRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileCreationResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserProfile(createUserProfileRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProfileApi.createUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 프로필을 삭제합니다.
         * @summary 사용자 프로필 삭제
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserProfile(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileDeletionResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserProfile(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProfileApi.deleteUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인한 사용자의 멘티 프로필과 멘토 프로필 보유 여부를 조회합니다.
         * @summary 내 프로필 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyProfileResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProfileApi.getMyProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 ID로 프로필 정보를 조회합니다.
         * @summary 사용자 프로필 조회
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfile(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProfileApi.getUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 프로필 고유 ID로 프로필 정보를 조회합니다.
         * @summary 프로필 ID로 조회
         * @param {number} idx 프로필 고유 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfileByIdx(idx: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfileByIdx(idx, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProfileApi.getUserProfileByIdx']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 프로필 정보를 수정합니다.
         * @summary 사용자 프로필 수정
         * @param {string} userId 사용자 ID
         * @param {UpdateUserProfileRequestDto} updateUserProfileRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfile(userId: string, updateUserProfileRequestDto: UpdateUserProfileRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileUpdateResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProfile(userId, updateUserProfileRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProfileApi.updateUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 프로필이 존재하면 수정하고, 존재하지 않으면 생성합니다.
         * @summary 프로필 생성 또는 수정
         * @param {string} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertUserProfile(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileUpsertResponseWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertUserProfile(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProfileApi.upsertUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserProfileApi - factory interface
 * @export
 */
export const UserProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserProfileApiFp(configuration)
    return {
        /**
         * 사용자 프로필의 완성도를 확인하고 누락된 필드를 반환합니다.
         * @summary 프로필 완성도 확인
         * @param {UserProfileApiCheckProfileCompletenessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProfileCompleteness(requestParameters: UserProfileApiCheckProfileCompletenessRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileCompletenessResponseWrapper> {
            return localVarFp.checkProfileCompleteness(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 회원가입 시 최소한의 정보로 기본 프로필을 생성하고 완성도 가이드를 제공합니다.
         * @summary 회원가입 시 기본 프로필 생성
         * @param {UserProfileApiCreateBasicProfileForSignupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasicProfileForSignup(requestParameters: UserProfileApiCreateBasicProfileForSignupRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasicProfileCreationResponseWrapper> {
            return localVarFp.createBasicProfileForSignup(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 새로운 사용자 프로필을 생성합니다.
         * @summary 사용자 프로필 생성
         * @param {UserProfileApiCreateUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserProfile(requestParameters: UserProfileApiCreateUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileCreationResponseWrapper> {
            return localVarFp.createUserProfile(requestParameters.createUserProfileRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 프로필을 삭제합니다.
         * @summary 사용자 프로필 삭제
         * @param {UserProfileApiDeleteUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserProfile(requestParameters: UserProfileApiDeleteUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileDeletionResponseWrapper> {
            return localVarFp.deleteUserProfile(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인한 사용자의 멘티 프로필과 멘토 프로필 보유 여부를 조회합니다.
         * @summary 내 프로필 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProfile(options?: RawAxiosRequestConfig): AxiosPromise<MyProfileResponseWrapper> {
            return localVarFp.getMyProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 ID로 프로필 정보를 조회합니다.
         * @summary 사용자 프로필 조회
         * @param {UserProfileApiGetUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(requestParameters: UserProfileApiGetUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse> {
            return localVarFp.getUserProfile(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 고유 ID로 프로필 정보를 조회합니다.
         * @summary 프로필 ID로 조회
         * @param {UserProfileApiGetUserProfileByIdxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfileByIdx(requestParameters: UserProfileApiGetUserProfileByIdxRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse> {
            return localVarFp.getUserProfileByIdx(requestParameters.idx, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 프로필 정보를 수정합니다.
         * @summary 사용자 프로필 수정
         * @param {UserProfileApiUpdateUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(requestParameters: UserProfileApiUpdateUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileUpdateResponseWrapper> {
            return localVarFp.updateUserProfile(requestParameters.userId, requestParameters.updateUserProfileRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필이 존재하면 수정하고, 존재하지 않으면 생성합니다.
         * @summary 프로필 생성 또는 수정
         * @param {UserProfileApiUpsertUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertUserProfile(requestParameters: UserProfileApiUpsertUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileUpsertResponseWrapper> {
            return localVarFp.upsertUserProfile(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserProfileApi - interface
 * @export
 * @interface UserProfileApi
 */
export interface UserProfileApiInterface {
    /**
     * 사용자 프로필의 완성도를 확인하고 누락된 필드를 반환합니다.
     * @summary 프로필 완성도 확인
     * @param {UserProfileApiCheckProfileCompletenessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApiInterface
     */
    checkProfileCompleteness(requestParameters: UserProfileApiCheckProfileCompletenessRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileCompletenessResponseWrapper>;

    /**
     * 회원가입 시 최소한의 정보로 기본 프로필을 생성하고 완성도 가이드를 제공합니다.
     * @summary 회원가입 시 기본 프로필 생성
     * @param {UserProfileApiCreateBasicProfileForSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApiInterface
     */
    createBasicProfileForSignup(requestParameters: UserProfileApiCreateBasicProfileForSignupRequest, options?: RawAxiosRequestConfig): AxiosPromise<BasicProfileCreationResponseWrapper>;

    /**
     * 새로운 사용자 프로필을 생성합니다.
     * @summary 사용자 프로필 생성
     * @param {UserProfileApiCreateUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApiInterface
     */
    createUserProfile(requestParameters: UserProfileApiCreateUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileCreationResponseWrapper>;

    /**
     * 사용자 프로필을 삭제합니다.
     * @summary 사용자 프로필 삭제
     * @param {UserProfileApiDeleteUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApiInterface
     */
    deleteUserProfile(requestParameters: UserProfileApiDeleteUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileDeletionResponseWrapper>;

    /**
     * 현재 로그인한 사용자의 멘티 프로필과 멘토 프로필 보유 여부를 조회합니다.
     * @summary 내 프로필 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApiInterface
     */
    getMyProfile(options?: RawAxiosRequestConfig): AxiosPromise<MyProfileResponseWrapper>;

    /**
     * 사용자 ID로 프로필 정보를 조회합니다.
     * @summary 사용자 프로필 조회
     * @param {UserProfileApiGetUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApiInterface
     */
    getUserProfile(requestParameters: UserProfileApiGetUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse>;

    /**
     * 프로필 고유 ID로 프로필 정보를 조회합니다.
     * @summary 프로필 ID로 조회
     * @param {UserProfileApiGetUserProfileByIdxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApiInterface
     */
    getUserProfileByIdx(requestParameters: UserProfileApiGetUserProfileByIdxRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse>;

    /**
     * 사용자 프로필 정보를 수정합니다.
     * @summary 사용자 프로필 수정
     * @param {UserProfileApiUpdateUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApiInterface
     */
    updateUserProfile(requestParameters: UserProfileApiUpdateUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileUpdateResponseWrapper>;

    /**
     * 프로필이 존재하면 수정하고, 존재하지 않으면 생성합니다.
     * @summary 프로필 생성 또는 수정
     * @param {UserProfileApiUpsertUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApiInterface
     */
    upsertUserProfile(requestParameters: UserProfileApiUpsertUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileUpsertResponseWrapper>;

}

/**
 * Request parameters for checkProfileCompleteness operation in UserProfileApi.
 * @export
 * @interface UserProfileApiCheckProfileCompletenessRequest
 */
export interface UserProfileApiCheckProfileCompletenessRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserProfileApiCheckProfileCompleteness
     */
    readonly userId: string
}

/**
 * Request parameters for createBasicProfileForSignup operation in UserProfileApi.
 * @export
 * @interface UserProfileApiCreateBasicProfileForSignupRequest
 */
export interface UserProfileApiCreateBasicProfileForSignupRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserProfileApiCreateBasicProfileForSignup
     */
    readonly userId: string
}

/**
 * Request parameters for createUserProfile operation in UserProfileApi.
 * @export
 * @interface UserProfileApiCreateUserProfileRequest
 */
export interface UserProfileApiCreateUserProfileRequest {
    /**
     * 
     * @type {CreateUserProfileRequestDto}
     * @memberof UserProfileApiCreateUserProfile
     */
    readonly createUserProfileRequestDto: CreateUserProfileRequestDto
}

/**
 * Request parameters for deleteUserProfile operation in UserProfileApi.
 * @export
 * @interface UserProfileApiDeleteUserProfileRequest
 */
export interface UserProfileApiDeleteUserProfileRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserProfileApiDeleteUserProfile
     */
    readonly userId: string
}

/**
 * Request parameters for getUserProfile operation in UserProfileApi.
 * @export
 * @interface UserProfileApiGetUserProfileRequest
 */
export interface UserProfileApiGetUserProfileRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserProfileApiGetUserProfile
     */
    readonly userId: string
}

/**
 * Request parameters for getUserProfileByIdx operation in UserProfileApi.
 * @export
 * @interface UserProfileApiGetUserProfileByIdxRequest
 */
export interface UserProfileApiGetUserProfileByIdxRequest {
    /**
     * 프로필 고유 ID
     * @type {number}
     * @memberof UserProfileApiGetUserProfileByIdx
     */
    readonly idx: number
}

/**
 * Request parameters for updateUserProfile operation in UserProfileApi.
 * @export
 * @interface UserProfileApiUpdateUserProfileRequest
 */
export interface UserProfileApiUpdateUserProfileRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserProfileApiUpdateUserProfile
     */
    readonly userId: string

    /**
     * 
     * @type {UpdateUserProfileRequestDto}
     * @memberof UserProfileApiUpdateUserProfile
     */
    readonly updateUserProfileRequestDto: UpdateUserProfileRequestDto
}

/**
 * Request parameters for upsertUserProfile operation in UserProfileApi.
 * @export
 * @interface UserProfileApiUpsertUserProfileRequest
 */
export interface UserProfileApiUpsertUserProfileRequest {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof UserProfileApiUpsertUserProfile
     */
    readonly userId: string
}

/**
 * UserProfileApi - object-oriented interface
 * @export
 * @class UserProfileApi
 * @extends {BaseAPI}
 */
export class UserProfileApi extends BaseAPI implements UserProfileApiInterface {
    /**
     * 사용자 프로필의 완성도를 확인하고 누락된 필드를 반환합니다.
     * @summary 프로필 완성도 확인
     * @param {UserProfileApiCheckProfileCompletenessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApi
     */
    public checkProfileCompleteness(requestParameters: UserProfileApiCheckProfileCompletenessRequest, options?: RawAxiosRequestConfig) {
        return UserProfileApiFp(this.configuration).checkProfileCompleteness(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 회원가입 시 최소한의 정보로 기본 프로필을 생성하고 완성도 가이드를 제공합니다.
     * @summary 회원가입 시 기본 프로필 생성
     * @param {UserProfileApiCreateBasicProfileForSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApi
     */
    public createBasicProfileForSignup(requestParameters: UserProfileApiCreateBasicProfileForSignupRequest, options?: RawAxiosRequestConfig) {
        return UserProfileApiFp(this.configuration).createBasicProfileForSignup(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 새로운 사용자 프로필을 생성합니다.
     * @summary 사용자 프로필 생성
     * @param {UserProfileApiCreateUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApi
     */
    public createUserProfile(requestParameters: UserProfileApiCreateUserProfileRequest, options?: RawAxiosRequestConfig) {
        return UserProfileApiFp(this.configuration).createUserProfile(requestParameters.createUserProfileRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 프로필을 삭제합니다.
     * @summary 사용자 프로필 삭제
     * @param {UserProfileApiDeleteUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApi
     */
    public deleteUserProfile(requestParameters: UserProfileApiDeleteUserProfileRequest, options?: RawAxiosRequestConfig) {
        return UserProfileApiFp(this.configuration).deleteUserProfile(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 로그인한 사용자의 멘티 프로필과 멘토 프로필 보유 여부를 조회합니다.
     * @summary 내 프로필 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApi
     */
    public getMyProfile(options?: RawAxiosRequestConfig) {
        return UserProfileApiFp(this.configuration).getMyProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 ID로 프로필 정보를 조회합니다.
     * @summary 사용자 프로필 조회
     * @param {UserProfileApiGetUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApi
     */
    public getUserProfile(requestParameters: UserProfileApiGetUserProfileRequest, options?: RawAxiosRequestConfig) {
        return UserProfileApiFp(this.configuration).getUserProfile(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 고유 ID로 프로필 정보를 조회합니다.
     * @summary 프로필 ID로 조회
     * @param {UserProfileApiGetUserProfileByIdxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApi
     */
    public getUserProfileByIdx(requestParameters: UserProfileApiGetUserProfileByIdxRequest, options?: RawAxiosRequestConfig) {
        return UserProfileApiFp(this.configuration).getUserProfileByIdx(requestParameters.idx, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 프로필 정보를 수정합니다.
     * @summary 사용자 프로필 수정
     * @param {UserProfileApiUpdateUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApi
     */
    public updateUserProfile(requestParameters: UserProfileApiUpdateUserProfileRequest, options?: RawAxiosRequestConfig) {
        return UserProfileApiFp(this.configuration).updateUserProfile(requestParameters.userId, requestParameters.updateUserProfileRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필이 존재하면 수정하고, 존재하지 않으면 생성합니다.
     * @summary 프로필 생성 또는 수정
     * @param {UserProfileApiUpsertUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileApi
     */
    public upsertUserProfile(requestParameters: UserProfileApiUpsertUserProfileRequest, options?: RawAxiosRequestConfig) {
        return UserProfileApiFp(this.configuration).upsertUserProfile(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}

